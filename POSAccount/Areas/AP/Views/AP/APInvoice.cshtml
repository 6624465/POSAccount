@model POSAccount.Contract.APInvoice


@{
    ViewBag.Title = "APInvoice";
}


<style type="text/css">
    .cursorCss
    {
        cursor: pointer;
    }
</style>

<div class="modal fade in" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

<div class="modal fade" id="mySearch">
    <div class="modal-dialog modal-lg generated_frm">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button aria-label="Close" data-dismiss="modal" class="close" type="button"><i class="fa fa-times"></i></button>
                <h4 class="modal-title">Search&nbsp;&nbsp;<span id="modalAni"><i class="fa fa-refresh fa-spin"></i></span></h4>
            </div>
            <div id="modalBody" style="display: none;"></div>
            <div class="modal-footer">
                <button data-dismiss="modal" class="btn btn-default" type="button"><i class="fa fa-times"></i>&nbsp;Close</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

@*@using (Html.BeginForm("SaveAPInvoice", "AP", new { area = "AP" }, FormMethod.Post))*@
@using (Ajax.BeginForm("SaveAPInvoice", "AP", new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSaveSuccess", OnFailure = "OnSaveFailure" }, new { enctype = "multipart/form-data", id = "myForm" }))
{
    <div class="box box-solid box-default">
        <div class="box-header box-solid">
            <h3 class="box-title">A P Invoice</h3>

        </div>

        <div class="box-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label">Invoice No</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.DocumentNo, new { @placeholder = "DocumentNo", @id = "txtDocumentNo", @readonly = "readonly", @class = "form-control input-sm " })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label">Invoice Date</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.DocumentDate, new { @placeholder = "DocumentDate", @id = "txtDocumentDate", @class = "form-control input-sm datepicker" })
                        </div>

                    </div>
                </div>
                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label">Creditor Code</label>
                        <div class="col-md-6">
                            @Html.DropDownListFor(m => m.CreditorCode, Model.CreditorList, "", new { @id = "ddlCreditorCode", @class = "form-control select2 select2-hidden-accessible;" })
                        </div>

                    </div>
                </div>
                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label">Credit Term</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.CreditTerm, new { @placeholder = "CreditTerm", @class = "form-control input-sm " })
                        </div>
                        <label for="txtCompany" class="col-md-2 control-label">Reference No.</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.ReferenceNo, new { @placeholder = "ReferenceNo", @class = "form-control input-sm " })
                        </div>
                    </div>
                </div>

                <div class="nav-tabs-custom">
                    <ul class="nav nav-tabs">
                        <li class="active">
                            <a href="#tbDetails" data-toggle="tab">Invoice Details</a>
                        </li>
                        <li class="">
                            <a href="#tbGLDetailsTab" data-toggle="tab">GL Allocation</a>
                        </li>
                        <li class="">
                            <a href="#tbSetOffDetails" data-toggle="tab">Set Off Details</a>
                        </li>
                    </ul>
                    <!-- Display List Section -->
                    <div class="tab-content">
                        <!-- Details -->
                        <div class="tab-pane active" id="tbDetails">

                            <div class="row">
                                <label class="col-md-2 control-label input-sm">Account Code :</label>
                                <div class="col-md-3">
                                    @Html.DropDownListFor(m => m.AccountCode, Model.AccountCodeList, "Please select one", new { @class = "form-control select2 select2-hidden-accessible;" })
                                </div>
                                <label class="col-md-1 control-label input-sm">Amount :</label>
                                <div class="col-md-2">
                                    @Html.TextBox("txtAmount", "", new { @class = "form-control input-sm decimalCss", data_a_sep = "", aPad = "false", data_a_sign = "" })
                                </div>
                                <div class="col-md-2">
                                    <button type="button" id="btnAddDetails" name="btnAddDetails" class="btn btn-social btn-success" onclick="AddAPDetails()">
                                        <i class="fa fa-plus-circle"></i>
                                        <span id="btnAddDetailsSpan">&nbsp;Add Details</span>
                                    </button>
                                </div>
                                <div class="col-md-1" style="display: none" id="btnClearDiv">

                                    <button id="btnClearDetails" onclick="btnClearDetailsClick()" type="button" class="btn btn-social btn-warning">Clear</button>
                                </div>
                            </div>
                            <div class="row">
                                &nbsp;
                            </div>
                            <div class="row">
                                <table id="tblItem" class="table table-striped table-hover table-bordered table-responsive ">
                                    <thead style="background-color: steelblue; color: white; font-size: 12px;">

                                        <tr>
                                            <th>Account Code</th>
                                            <th>Account Description</th>
                                            <th>Base Amount</th>
                                            <th>Currency Code</th>
                                            <th>Local Amt</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody style="font-size: 12px;">
                                        @{
    for (int i = 0; i < Model.APInvoiceDetails.Count; i++)
    {
                                            <tr id="tr_@i" class="apInvoiceDetailsCss">
                                                <td name="AccountCode">
                                                    @Html.HiddenFor(m => m.APInvoiceDetails[i].ItemNo)
                                                    @Html.HiddenFor(m => m.APInvoiceDetails[i].AccountCode)
                                                    @Html.DisplayFor(m => m.APInvoiceDetails[i].AccountCode)
                                                </td>
                                                <td name="AccountCode">
                                                    @Html.HiddenFor(m => m.APInvoiceDetails[i].AccountCodeDescription)
                                                    @Html.DisplayFor(m => m.APInvoiceDetails[i].AccountCodeDescription)
                                                </td>
                                                <td name="BaseAmount">
                                                    @Html.HiddenFor(m => m.APInvoiceDetails[i].BaseAmount)
                                                    @Html.DisplayFor(m => m.APInvoiceDetails[i].BaseAmount)
                                                </td>
                                                <td name="CurrencyCode">
                                                    @Html.HiddenFor(m => m.APInvoiceDetails[i].CurrencyCode)
                                                    @Html.DisplayFor(m => m.APInvoiceDetails[i].CurrencyCode)
                                                </td>
                                                <td name="LocalAmount">
                                                    @Html.HiddenFor(m => m.APInvoiceDetails[i].LocalAmount)
                                                    @Html.DisplayFor(m => m.APInvoiceDetails[i].LocalAmount)
                                                    @Html.HiddenFor(m => m.APInvoiceDetails[i].Status)
                                                </td>
                                                <td name="Action">
                                                    <div class="dropdown">
                                                        <button class="btn btn-warning btn-sm dropdown-toggle" id="btnAction_@(i)" style="border-radius: 0px !important;" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                                            Action
                                                                <span class="caret"></span>
                                                        </button>
                                                        <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                                            <li><a class="cursorCss" id="Edit_@i" onclick="EditAPInvoiceDetails('@(i)')"><i class="fa fa-pencil"></i>&nbsp;Edit</a></li>
                                                            <li><a class="cursorCss" onclick="DeleteAPInvoiceDetails('@(i)')"><i class="fa fa-trash-o"></i>&nbsp;Delete</a></li>
                                                        </ul>
                                                    </div>
                                                </td>
                                            </tr>
    }
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!--GLDetails-->
                        <div id="tbGLDetailsTab" class="tab-pane">
                            <div class="row">
                                <div class="col-md-12">
                                    <table id="tblGLDetails" class="table table-striped table-hover table-bordered table-responsive ">
                                        <thead style="background-color: steelblue; color: white; font-size: 12px;">

                                            <tr>
                                                <th>Account Code</th>
                                                <th>Credit Amount</th>
                                                <th>Debit Amount</th>
                                                <th>Total Amount</th>
                                            </tr>
                                        </thead>
                                        <tbody style="font-size: 12px;">
                                            @if (Model.GLTransactionDetails != null)
                                            {
                                                for (int i = 0; i < Model.GLTransactionDetails.Count; i++)
                                                {
                                                <tr id="tblGLDetailstr_@i" class="tblGLDetailsCss">
                                                    <td>
                                                        @Html.HiddenFor(m => m.GLTransactionDetails[i].DocumentNo)
                                                        @Html.HiddenFor(m => m.GLTransactionDetails[i].ItemNo)
                                                        @Html.HiddenFor(m => m.GLTransactionDetails[i].DocumentType)
                                                        @Html.HiddenFor(m => m.GLTransactionDetails[i].Status)
                                                        @Html.HiddenFor(m => m.GLTransactionDetails[i].AccountCode)
                                                        <span id="GLTransactionDetails_@(i)__AccountCode_span">@Model.GLTransactionDetails[i].AccountCode</span>

                                                    </td>
                                                    <td>
                                                        @Html.HiddenFor(m => m.GLTransactionDetails[i].CreditAmount)
                                                        <span id="GLTransactionDetails_@(i)__CreditAmount_span">@Model.GLTransactionDetails[i].CreditAmount</span>
                                                    </td>
                                                    <td>
                                                        @Html.HiddenFor(m => m.GLTransactionDetails[i].DebitAmount)
                                                        <span id="GLTransactionDetails_@(i)__DebitAmount_span">@Model.GLTransactionDetails[i].DebitAmount</span>
                                                    </td>
                                                    <td></td>
                                                </tr>
                                                }
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr id="whRow" style="display: none; background-color: azure;">
                                            </tr>
                                            <tr id="vatRow" style="display: none; background-color: azure;"></tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                            <div class="row">
                            </div>
                        </div>
                        <!--Set Off Details-->
                        <div id="tbSetOffDetails" class="tab-pane">
                            <div class="row">
                                <div class="col-md-6">
                                    <div class="input-group">
                                        <input type="text" class="form-control valid" placeholder="Search" name="srch-term" id="srch-term" onkeypress="srchTerm_KeyPress(event)">
                                        <div class="input-group-btn">
                                            <button class="btn btn-default" type="button" onclick="btnSearchClick()"><i class="glyphicon glyphicon-search"></i></button>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6" style="padding-top: 5px;">
                                    <label id="lblErrMsg" style="color: red; font-weight: bold;"></label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-12">
                                    <table id="tblSetoffItem" class="table table-striped table-hover table-bordered table-responsive ">
                                        <thead style="background-color: steelblue; color: white; font-size: 12px;">

                                            <tr>
                                                <th class="hidden">#</th>
                                                <th class="hidden">Account Code</th>
                                                <th>Account Description</th>
                                                <th>Base Amount</th>
                                                <th>Currency Code</th>
                                                <th>Local Amt</th>
                                                <th>Action</th>
                                            </tr>
                                        </thead>
                                        <tbody style="font-size: 12px;">
                                            @for (int i = 0; i < Model.APInvoiceDetails.Count; i++)
                                            {
                                                <tr id="tr_@i">
                                                    <td class='hidden'>
                                                        @Html.HiddenFor(m => m.APInvoiceDetails[i].ItemNo)
                                                    </td>
                                                    <td class='hidden'>
                                                        @Html.HiddenFor(m => m.APInvoiceDetails[i].AccountCode)
                                                    </td>
                                                    <td name="AccountCode">
                                                        @Html.HiddenFor(m => m.APInvoiceDetails[i].AccountCode)
                                                        @Html.DisplayFor(m => m.APInvoiceDetails[i].AccountCode)
                                                    </td>
                                                    <td name="BaseAmount">
                                                        @Html.HiddenFor(m => m.APInvoiceDetails[i].BaseAmount)
                                                        @Html.DisplayFor(m => m.APInvoiceDetails[i].BaseAmount)
                                                    </td>
                                                    <td name="CurrencyCode">
                                                        @Html.HiddenFor(m => m.APInvoiceDetails[i].CurrencyCode)
                                                        @Html.DisplayFor(m => m.APInvoiceDetails[i].CurrencyCode)
                                                    </td>
                                                    <td name="LocalAmount">
                                                        @Html.HiddenFor(m => m.APInvoiceDetails[i].LocalAmount)
                                                        @Html.DisplayFor(m => m.APInvoiceDetails[i].LocalAmount)
                                                    </td>
                                                    <td name="Action"></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>
        <div class="panel-footer clearfix">
            <div class="row" style="margin-top: 10px;">
                <div class="pull-right col-xs-4">
                    <div class="form-group">
                        <div>
                            <div class="col-md-5">
                                <label class="control-label input-sm pull-right">Total Amount</label>
                            </div>
                            <div class="col-sm-5">
                                @Html.TextBox("txtLocalAmount", "", new { @class = "form-control input-sm", disabled = "disabled" })
                                @Html.HiddenFor(x => x.LocalAmount)
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top: 10px;">
                <div class="pull-right col-xs-4">
                    <div class="form-group">
                        <div>
                            <label for="txtInvoiceNo" class="col-md-5 control-label input-sm">Total Discount</label>
                            <div class="col-sm-5">
                                @Html.TextBoxFor(m => m.DiscountAmount, new { @class = "form-control input-sm", onblur = "discountAmountBlur()" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top: 10px;">
                <div class="pull-right col-xs-4">
                    <div class="form-group">
                        <div>
                            <label for="txtInvoiceNo" class="col-md-5 control-label input-sm">Amount After Discount</label>
                            <div class="col-sm-5">
                                @Html.TextBox("txtPaymentAmount", "", new { @class = "form-control input-sm", disabled = "disabled" })
                                @Html.HiddenFor(m => m.PaymentAmount)
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-top: 10px;">
                <div class="pull-right col-xs-4">
                    <div class="form-group">
                        <div>
                            <label for="txtInvoiceNo" class="col-md-2 control-label input-sm">W/H %</label>
                            <div class="col-sm-3">
                                <select class="form-control input-sm" id="SelectVat" name="SelectVat" onchange="SelectVatOnChange(this)">
                                    <option value=""></option>
                                    <option value="1">1</option>
                                    <option value="3">3</option>
                                </select>
                            </div>
                            <div class="col-sm-5">
                                <div class="input-group">
                                    <span class="input-group-addon">
                                        @Html.CheckBoxFor(m => m.IsVAT, new { @class = "checkbox", onchange = "chkChange(this)" })
                                    </span>
                                    @Html.TextBox("txtTaxAmount", "", new { @class = "form-control input-sm", disabled = "disabled" })
                                    @Html.HiddenFor(m => m.TaxAmount)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row" style="margin-top: 10px;">
                <div class="pull-right col-xs-4">
                    <div class="form-group">
                        <div>
                            <label class="col-md-5 control-label input-sm">VAT 7%</label>
                            <div class="col-sm-5">
                                <div class="input-group">
                                    <span class="input-group-addon">
                                        <input type="checkbox" id="isVat2" name="isVat2" class="checkbox" onchange="isVat2Change(this)" />
                                    </span>
                                    @Html.TextBox("txtVatAmount", "", new { @class = "form-control input-sm", disabled = "disabled" })
                                    <input type="hidden" name="VatAmount" id="VatAmount" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row" style="margin-top: 10px;">
                <div class="pull-right col-xs-4">
                    <div class="form-group">

                        <div>
                            <label for="txtInvoiceNo" class="col-md-5 control-label input-sm">Net Amt</label>
                            <div class="col-sm-5">
                                @Html.TextBox("txtTotalAmount", "", new { @class = "form-control input-sm", disabled = "disabled" })
                                @Html.HiddenFor(x => x.TotalAmount)
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="box-footer">
            <div class="row  no-print">
                <div class="col-xs-12">
                    <a href="@Url.Action("APInvoice", "AP", new { area = "AP", invoiceType = "NEW" }, null)" class="btn btn-social btn-primary">
                        <i class="fa fa-file-o"></i>
                        New
                    </a>
                    <button type="button" id="btnSave" class="btn btn-social btn-success" onclick="SaveData();">
                        <i class="fa fa-save"></i>
                        Save
                    </button>


                    <a href="#" class="btn btn-social btn-default" onclick="btnClear();">
                        <i class="fa fa-close"></i>
                        Clear
                    </a>
                    <a href="#" id="btnDelete" onclick="DeleteAPInvoice('@Model.DocumentNo')" class="btn btn-social btn-danger">
                        <i class="fa fa-times-circle"></i>
                        Delete
                    </a>


                    <a href="@Url.Action("APInvoiceList", "AP", new { area = "AP" }, null)" id="btnBack" class="btn btn-social btn-info pull-right">
                        <i class="fa fa-arrow-circle-o-left"></i>
                        Back
                    </a>
                </div>
            </div>
        </div>

        <div class="overlay" style="opacity: 0.8; display: none;" id="overlayDiv">
            <i class="fa fa-refresh fa-spin"></i>
        </div>
    </div>
    <input type="hidden" id="hdnFlag" name="hdnFlag" value="-1" />
}


@section Scripts{
    @Scripts.Render("~/bundles/modalform")
    @Scripts.Render("~/bundles/dataTable")


    <script src="~/ThemeAdminLTE-2.2.0/plugins/select2/select2.min.js"></script>
    <script src="@Url.Content("~/Scripts/moment.js")"></script>
    <script src="@Url.Content("~/Scripts/bootstrap-datetimepicker.js")"></script>
    <script type="text/javascript">
        var isEditLocal = false;
        var rowdetails;
        var searchBoxUrl = '@Url.Content("~/search/SearchBox")';
        var _selectedDocumentNoId;
        var DocumentNo;

        $("#ddlCreditorCode").select2();
        $("#AccountCode").select2();


        function Search() {
            var _selectedDocumentNoId = $("#txtSearch").val();
            $("#btnSearch").href = "/AP/SearchAPInvoice?DocumentNo=" + _selectedDocumentNoId;
            $("#btnSearch").attr("href", "/AP/SearchAPInvoice?DocumentNo=" + _selectedDocumentNoId)

            return true;
        }

        function SaveData() {
            
            $('.select2-hidden-accessible').next().next().css('border', '');

            if ($('#myForm').valid()) {
                if ($('.apInvoiceDetailsCss').length > 0) {
                    $('#overlayDiv').fadeIn();
                    $('#myForm').submit();
                }
                else
                    alert('Atleast one Invoice detail is required');
            } else {
                if ($('.select2-hidden-accessible').hasClass('error')) {
                    $('.select2-hidden-accessible.error').next().next().css('border', 'solid 1px red');
                }
                return false;
            }
        }

        function OnSaveFailure(result) {
            ModalShow(result.Message, "Failure", "Save");
        }

        function OnSaveSuccess(result) {
            ModalShow(result.Message, "Success", "Save");
            DocumentNo = result.apInvoiceData.DocumentNo;
        }

        function BtnOK() {
            if (ActionType == "Save") {
                location.href = "/AP/APInvoiceList";
            }
        }

        function DeleteAPInvoice() {
            var documentNo = $("#txtDocumentNo").val();
            $.ajax({
                url: "/AP/DeleteAPInvoice", type: "POST", dataType: "json",
                data: { DocumentNo: documentNo, CancelBy: "" },
                async: true,
                success: function (response) {
                    if (response.result) {
                        ModalShow(response.Message, "Success", "Delete");
                        $("#txtDocumentNo").addClass("StrikeOut")
                        $("#btnSave").attr("disabled", " disabled")
                        $("#btnApprove").attr("disabled", " disabled")

                    } else {
                        ModalShow(response.Message, "Failure", "Delete");
                    }
                }
            })
        }




        $(document).ready(function () {
            $('#tblGLDetails').DataTable({
                'bFilter': false,
                'bPaginate': false,
                'bInfo': false,
                'aoColumnDefs': [
                  {
                      bSortable: false,
                      aTargets: [-1]
                  }],
                'fnRowCallback': function (nRow, aData, iDisplayIndex) {
                    nRow.id = 'tblGLDetailstr_' + iDisplayIndex;
                    //nRow.className = 'tblGLDetailsCss';
                    return nRow;
                }
            });

            $('#tblItem').DataTable({
                'bFilter': false,
                'bPaginate': false,
                'bInfo': false,
                'aoColumnDefs': [
                  {
                      bSortable: false,
                      aTargets: [-1]
                  }],
                'fnRowCallback': function (nRow, aData, iDisplayIndex) {
                    //nRow.className = "gradeX odd";
                    nRow.id = 'tblAPInvoiceDetails_' + iDisplayIndex;
                    nRow.className = 'apInvoiceDetailsCss';
                    return nRow;
                }
            });

            $('#txtDocumentDate').datetimepicker({
                useCurrent: false,
                //maxDate: moment('DateTime.Now.ToString("dd/MM/yyyy")'),
                format: 'DD/MM/YYYY',
                inline: false
            });


            $('#myForm').validate({
                rules: {
                    CreditorCode: {
                        required: true
                    },
                    DocumentDate: {
                        required: true
                    }
                },
                messages: {
                    CreditorCode: {
                        required: "Creditor Code is required"
                    },

                    DocumentDate: {
                        required: "DocumentDate is required"
                    }
                }
            });
           

            if ($('#txtDocumentNo').val() == "")
            {
                $('#btnDelete').prop('disabled', true);
            }
        });

        function SaveData() {
            if ($('#myForm').valid()) {
                if ($('.apInvoiceDetailsCss').length > 0) {
                    $('#overlayDiv').fadeIn();
                    $('#myForm').submit();
                }
                else
                    alert('Atleast one Invoice detail is required');
            }
        }

        function btnClear() {
            $('.form-control').val('');
            $('#ddlCreditorCode').select2("val","");
            $('#AccountCode').select2("val", "");
        }


        function EditAPInvoiceDetails(t, rowCount, qno, elocal) {
            rowdetails = t;
            if (elocal == "1") {
                isEditLocal = true;
            }
            if (qno == 0) {
                var row = $(t).closest("tr").get(0);
                var oTable = $('#tblItem').DataTable();
                var ids = $.map(oTable.rows(row).data(), function (item) {
                    var c = new Array();

                    c = [item[0].substr(item[0].indexOf(">") + 1, 20), item[1].substr(item[1].indexOf(">") + 1, 20), item[2].substr(item[2].indexOf(">") + 1, 20), item[3].substr(item[3].indexOf(">") + 1, 20), item[4].substr(item[4].indexOf(">") + 1, 20), item[5].substr(item[5].indexOf(">") + 1, 20), item[6].substr(item[6].indexOf(">") + 1, 20)];
                    return c
                });

                if (ids[0] == "") {
                    setTimeout(function () {
                        $("#ServiceType").val(ids[2])
                        $("#ChargeCode").val(ids[3])
                        $("#ChargeType").val(ids[4])
                        $("#From").val(ids[5])
                        $("#To").val(ids[6])
                        $("#SellRate").val(ids[7])
                    }, 100)
                    return false;
                }
            }
        }

        function DeleteAPInvoiceDetails(t, documentNo, qno) {
            if (!confirm("Do you want to delete QuotationItem?")) {
                return false;
            }


            if (QuotationItemId > 0) {
                $.ajax({
                    url: "/AP/DeleteAPInvoice?documentNo=" + documentNo,
                    type: "GET",
                    contentType: "application/x-www-form-urlencoded",
                    success: function (result) {
                        var row = $(t).closest("tr").get(0);
                        var oTable = $('#tblItem').dataTable();
                        oTable.fnDeleteRow(oTable.fnGetPosition(row));
                    }
                });
            }
            else {
                var row = $(t).closest("tr").get(0);
                var table = $('#tblItem').DataTable();
                var oTable = $('#tblItem').dataTable();
                table.row('.selected').remove().draw(false);
                oTable.fnDeleteRow(oTable.fnGetPosition(row));
                //$('#tblQuotationItem').deleteRow(0);
            }

        }

        $('#tblItem tbody').on('click', 'tr', function () {
            var table = $('#tblItem').DataTable();
            //alert('Row index: ' + table.row(this).index());
        });


        function linkClicked(li) {
            linkedIndex = li;
        }

        function AddAPDetails() {          
           
            var accountCode = $("#AccountCode").val();
            var amount = $("#txtAmount").val();

            $('.select2-hidden-accessible').next().next().css('border', '');

            if (!$("#myForm").valid()) {
                if ($('.select2-hidden-accessible').hasClass('error')) {
                    $('.select2-hidden-accessible.error').next().next().css('border', 'solid 1px red');
                }
                return false;
            } else if ((accountCode == null || accountCode == "") && (amount == "" || amount == null)) {
                return false;
            }

            var customerCode = $('#ddlCreditorCode option:selected').val();

            var rooturl = '@Url.Action("AddAPInvoiceItem", "AP", new { area = "AP" })';
            var url = rooturl + "?customerCode=" + customerCode + "&accountCode=" + accountCode + "&amount=" + amount;
            $.post(url, null, function (data) {
                
                var hdnFlag = $('#hdnFlag').val();
                var Obj = {};
                var _index = $('.apInvoiceDetailsCss').length;
                if (hdnFlag == '-1') {
                    Obj = {
                        Index: _index,
                        ItemNo: data.APInvoiceDetail.ItemNo,
                        AccountCode: data.APInvoiceDetail.AccountCode,
                        AccountCodeDescription: data.APInvoiceDetail.AccountCodeDescription,
                        BaseAmount: data.APInvoiceDetail.BaseAmount,
                        CurrencyCode: data.APInvoiceDetail.CurrencyCode,
                        LocalAmount: data.APInvoiceDetail.LocalAmount,
                        customerDebitCredit: data.customerDebitCredit,
                        accountDebitCredit: data.accountDebitCredit
                    };
                    var rowData = [
                        '<input id="APInvoiceDetails_' + Obj.Index + '__ItemNo" name="APInvoiceDetails[' + Obj.Index + '].ItemNo" type="hidden" value="' + Obj.ItemNo + '">' +
                        '<input id="APInvoiceDetails_' + Obj.Index + '__AccountCode" name="APInvoiceDetails[' + Obj.Index + '].AccountCode" type="hidden" value="' + Obj.AccountCode + '">' +
                        '<span id="APInvoiceDetails_' + Obj.Index + '__AccountCode_span">' + Obj.AccountCode + '</span>' +
                        '<input id="APInvoiceDetails_' + Obj.Index + '__Status" name="APInvoiceDetails[' + Obj.Index + '].Status" type="hidden" value="True">',

                        '<input id="APInvoiceDetails_' + Obj.Index + '__AccountCodeDescription" name="APInvoiceDetails[' + Obj.Index + '].AccountCodeDescription" type="hidden" value="' + Obj.AccountCodeDescription + '">' +
                        '<span id="APInvoiceDetails_' + Obj.Index + '__AccountCodeDescription_span">' + Obj.AccountCodeDescription + '</span>',
                        '<input id="APInvoiceDetails_' + Obj.Index + '__BaseAmount" name="APInvoiceDetails[' + Obj.Index + '].BaseAmount" type="hidden" value="' + Obj.BaseAmount + '">' +
                        '<span id="APInvoiceDetails_' + Obj.Index + '__BaseAmount_span">' + Obj.BaseAmount.toFixed(2) + '</span>',
                        '<input id="APInvoiceDetails_' + Obj.Index + '__CurrencyCode" name="APInvoiceDetails[' + Obj.Index + '].CurrencyCode" type="hidden" value="' + Obj.CurrencyCode + '">' +
                        '<span id="APInvoiceDetails_' + Obj.Index + '__CurrencyCode_span">' + Obj.CurrencyCode + '</span>',
                        '<input id="APInvoiceDetails_' + Obj.Index + '__LocalAmount" name="APInvoiceDetails[' + Obj.Index + '].LocalAmount" type="hidden" value="' + Obj.LocalAmount + '">' +
                        '<span id="APInvoiceDetails_' + Obj.Index + '__LocalAmount_span">' + Obj.LocalAmount.toFixed(2) + '</span>',
                        '<div class="dropdown">' +
                    '<button class="btn btn-warning btn-sm dropdown-toggle" id="btnAction_' + Obj.Index + '" style="border-radius: 0px !important;" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">Action<span class="caret"></span></button>' +
                    '<ul class="dropdown-menu" aria-labelledby="dropdownMenu1">' +
                        '<li><a class="cursorCss" id="Edit_' + Obj.index + '" onclick="EditAPInvoiceDetails(' + Obj.Index + ')"><i class="fa fa-pencil"></i>&nbsp;Edit</a></li>' +
                        '<li><a class="cursorCss" onclick="DeleteAPInvoiceDetails(' + Obj.Index + ')"><i class="fa fa-trash-o"></i>&nbsp;Delete</a></li>' +
                    '</ul></div>'];
                    $('#tblItem').dataTable().fnAddData(rowData);
                }
                else {

                    Obj = {
                        Index: _index,
                        ItemNo: data.APInvoiceDetail.ItemNo,
                        AccountCode: data.APInvoiceDetail.AccountCode,
                        AccountCodeDescription: data.APInvoiceDetail.AccountCodeDescription,
                        BaseAmount: data.APInvoiceDetail.BaseAmount,
                        CurrencyCodse: data.APInvoiceDetail.CurrencyCode,
                        LocalAmount: data.APInvoiceDetail.LocalAmount,
                        customerDebitCredit: data.customerDebitCredit,
                        accountDebitCredit: data.accountDebitCredit
                    };

                    $('#APInvoiceDetails_' + hdnFlag + '__AccountCode').val(data.APInvoiceDetail.AccountCode);
                    $('#APInvoiceDetails_' + hdnFlag + '__AccountCode_span').text(data.APInvoiceDetail.AccountCode);
                    $('#APInvoiceDetails_' + hdnFlag + '__AccountCodeDescription').val(data.APInvoiceDetail.AccountCode);
                    $('#APInvoiceDetails_' + hdnFlag + '__AccountCodeDescription_span').text(data.APInvoiceDetail.AccountCodeDescription);
                    $('#APInvoiceDetails_' + hdnFlag + '__BaseAmount').val(data.APInvoiceDetail.BaseAmount);
                    $('#APInvoiceDetails_' + hdnFlag + '__BaseAmount_span').text(data.APInvoiceDetail.BaseAmount.toFixed(2));
                    $('#APInvoiceDetails_' + hdnFlag + '__CurrencyCode').val(data.APInvoiceDetail.CurrencyCode);
                    $('#APInvoiceDetails_' + hdnFlag + '__CurrencyCode_span').text(data.APInvoiceDetail.CurrencyCode);
                    $('#APInvoiceDetails_' + hdnFlag + '__LocalAmount').val(data.APInvoiceDetail.LocalAmount);
                    $('#APInvoiceDetails_' + hdnFlag + '__LocalAmount_span').text(data.APInvoiceDetail.LocalAmount.toFixed(2));

                    $('#btnClearDiv').hide();
                    $('#btnAddDetailsSpan').text('Add Details');
                }
                var rowsCount = $('.apInvoiceDetailsCss').length;
                var amount = 0.00;
                for (var x = 0; x < rowsCount; x++) {
                    if (!$('#APInvoiceDetails_' + x + '__ItemNo').hasClass('deletedItem')) {
                        amount = amount + parseFloat($('#APInvoiceDetails_' + x + '__LocalAmount').val());
                    }
                }
                $('#txtLocalAmount').val(commaSeparateNumber(amount.toFixed(2)));
                $('#LocalAmount').val(amount);
                discountAmountBlur();
                $('#hdnFlag').val('-1');

                setTimeout(function () {
                    AddToGLAllocationTbl(Obj, data.CreditorAccount, parseInt(hdnFlag));
                }, 500);
            });
            $('#AccountCode').val('');
            $('#txtAmount').val('');
            $("#AccountCode").select2("val", "");
        }

        var glTotalAmount = 0.00;

        function AddToGLAllocationTbl(Obj, CreditorAccount, hdnFlag) {
            
            var Index = $('.tblGLDetailsCss').length;
            var footerRows = $('.footerCss').length;
            Index = Index + footerRows;

            if (hdnFlag == -1)
                glTotalAmount = glTotalAmount + Obj.BaseAmount;
            else {
                var glIndex = hdnFlag + 1;
                var oldVal = parseInt($('#GLTransactionDetails_' + glIndex + '__DebitAmount').val());
                glTotalAmount = glTotalAmount - oldVal;
                glTotalAmount = glTotalAmount + Obj.BaseAmount;
            }

            if (Index == 0) {
                var totalRow = [
                    '<input id="GLTransactionDetails_' + Index + '__DocumentNo" name="GLTransactionDetails[' + Index + '].DocumentNo" type="hidden" value="">' +
                    '<input id="GLTransactionDetails_' + Index + '__ItemNo" name="GLTransactionDetails[' + Index + '].ItemNo" type="hidden" value="' + Obj.ItemNo + '">' +
                    '<input id="GLTransactionDetails_' + Index + '__DocumentType" name="GLTransactionDetails[' + Index + '].DocumentType" type="hidden" value="AP">' +
                    '<input id="GLTransactionDetails_' + Index + '__AccountCode" name="GLTransactionDetails[' + Index + '].AccountCode" type="hidden" value="' + CreditorAccount + '">' +
                    '<span id="GLTransactionDetails_' + Index + '__AccountCode_span">' + CreditorAccount + '</span>',

                    '<input id="GLTransactionDetails_' + Index + '__CreditAmount" name="GLTransactionDetails[' + Index + '].CreditAmount" type="hidden" value="' + (Obj.customerDebitCredit == 'CREDIT' ? Obj.BaseAmount : 0.00) + '">' +
                    '<span id="GLTransactionDetails_' + Index + '__CreditAmount_span">' + (Obj.customerDebitCredit == 'CREDIT' ? parseFloat(Obj.BaseAmount).toFixed(2) : 0.00) + '</span>',

                    '<input id="GLTransactionDetails_' + Index + '__DebitAmount" name="GLTransactionDetails[' + Index + '].DebitAmount" type="hidden" value="' + (Obj.customerDebitCredit == 'DEBIT' ? Obj.BaseAmount : 0.00) + '">' +
                    '<span id="GLTransactionDetails_' + Index + '__DebitAmount_span">' + (Obj.customerDebitCredit == 'DEBIT' ? parseFloat(Obj.BaseAmount).toFixed(2) : 0.00) + '</span>',

                    '<input id="GLTransactionDetails_' + Index + '__TotalAmount" name="GLTransactionDetails[' + Index + '].TotalAmount" type="hidden" value="' + glTotalAmount + '">' +
                    '<span id="GLTransactionDetails_' + Index + '__TotalAmount_span">' + parseFloat(glTotalAmount).toFixed(2) + '</span>' +
                    '<input id="GLTransactionDetails_' + Index + '__Status" name="GLTransactionDetails[' + Index + '].Status" type="hidden" value="True">'
                ];
                $('#GLTransactionDetails_' + Index + '__DocumentNo').parents('tr').addClass('tblGLDetailsCss');
                $('#tblGLDetails').dataTable().fnAddData(totalRow);

                //Index = Index + 1;
            }
            else {
                if (Obj.customerDebitCredit == 'CREDIT') {
                    $('#GLTransactionDetails_0__TotalAmount_span, #GLTransactionDetails_0__CreditAmount_span').text(parseFloat(glTotalAmount).toFixed(2));
                    $('#GLTransactionDetails_0__TotalAmount, #GLTransactionDetails_0__CreditAmount').val(glTotalAmount);
                }
                else if (Obj.customerDebitCredit == 'DEBIT') {
                    $('#GLTransactionDetails_0__TotalAmount_span, #GLTransactionDetails_0__DebitAmount_span').text(parseFloat(glTotalAmount).toFixed(2));
                    $('#GLTransactionDetails_0__TotalAmount, #GLTransactionDetails_0__DebitAmount').val(glTotalAmount);
                }
            }
            Index = Index + 1;

            if (hdnFlag == -1) {
                var rowData = [
                        '<input id="GLTransactionDetails_' + Index + '__DocumentNo" name="GLTransactionDetails[' + Index + '].DocumentNo" type="hidden" value="">' +
                        '<input id="GLTransactionDetails_' + Index + '__ItemNo" name="GLTransactionDetails[' + Index + '].ItemNo" type="hidden" value="' + Obj.ItemNo + '">' +
                        '<input id="GLTransactionDetails_' + Index + '__DocumentType" name="GLTransactionDetails[' + Index + '].DocumentType" type="hidden" value="AP">' +
                        '<input id="GLTransactionDetails_' + Index + '__AccountCode" name="GLTransactionDetails[' + Index + '].AccountCode" type="hidden" value="' + Obj.AccountCode + '">' +
                        '<span id="GLTransactionDetails_' + Index + '__AccountCode_span">' + Obj.AccountCode + '</span>',

                        '<input id="GLTransactionDetails_' + Index + '__CreditAmount" name="GLTransactionDetails[' + Index + '].CreditAmount" type="hidden" value="' + (Obj.customerDebitCredit == 'CREDIT' ? Obj.BaseAmount : 0.00) + '">' +
                        '<span id="GLTransactionDetails_' + Index + '__CreditAmount_span">' + (Obj.customerDebitCredit == 'CREDIT' ? parseFloat(Obj.BaseAmount).toFixed(2) : 0.00) + '</span>',

                        '<input id="GLTransactionDetails_' + Index + '__DebitAmount" name="GLTransactionDetails[' + Index + '].DebitAmount" type="hidden" value="' + (Obj.customerDebitCredit == 'DEBIT' ? Obj.BaseAmount : 0.00) + '">' +
                        '<span id="GLTransactionDetails_' + Index + '__DebitAmount_span">' + (Obj.customerDebitCredit == 'DEBIT' ? parseFloat(Obj.BaseAmount).toFixed(2) : 0.00) + '</span>',

                        '<input id="GLTransactionDetails_' + Index + '__TotalAmount" name="GLTransactionDetails[' + Index + '].TotalAmount" type="hidden" value="' + Obj.BaseAmount + '">' +
                        '<span id="GLTransactionDetails_' + Index + '__TotalAmount_span">' + parseFloat(Obj.BaseAmount).toFixed(2) + '</span>' +
                        '<input id="GLTransactionDetails_' + Index + '__Status" name="GLTransactionDetails[' + Index + '].Status" type="hidden" value="True">'
                ];
                $('#tblGLDetails').dataTable().fnAddData(rowData);

                $('#GLTransactionDetails_' + Index + '__DocumentNo').parents('tr').addClass('tblGLDetailsCss mappingCss_' + (parseInt(Obj.Index)));
            }
            else {
                var glIndex = hdnFlag + 1;
                $('#GLTransactionDetails_' + glIndex + '__DebitAmount_span').text(parseFloat(Obj.BaseAmount).toFixed(2));
                $('#GLTransactionDetails_' + glIndex + '__DebitAmount').val(Obj.BaseAmount);

                $('#GLTransactionDetails_' + glIndex + '__TotalAmount_span').text(parseFloat(Obj.BaseAmount).toFixed(2));
                $('#GLTransactionDetails_' + glIndex + '__TotalAmount').val(Obj.BaseAmount);
            }
        }

        function EditAPInvoiceDetails(index) {

            $('#AccountCode').val($('#APInvoiceDetails_' + index + '__AccountCode').val());
            $('#txtAmount').val($('#APInvoiceDetails_' + index + '__LocalAmount').val());
            $('#AccountCode').select2();
            $('#btnAddDetailsSpan').text('Update');
            $('#btnClearDiv').fadeIn();

            $('#hdnFlag').val(index);
        }

        function DeleteAPInvoiceDetails(index) {
            
            $('#tblAPInvoiceDetails_' + (index)).css({
                'text-decoration': 'line-through',
                'color': 'red',
                'font-style': 'italic'
            });
            $('#btnAction_' + index).attr('disabled', 'disabled');
            $('#APInvoiceDetails_' + index + '__ItemNo').addClass('deletedItem');
            $('#APInvoiceDetails_' + index + '__Status').val('False');

            $('.mappingCss_' + index).css({
                'text-decoration': 'line-through',
                'color': 'red',
                'font-style': 'italic'
            });
            var rowsCount = $('.apInvoiceDetailsCss').length;
            var amount = 0.00;
            for (var x = 0; x < rowsCount; x++) {
                if (!$('#APInvoiceDetails_' + x + '__ItemNo').hasClass('deletedItem')) {
                    amount = amount + parseFloat($('#APInvoiceDetails_' + x + '__LocalAmount').val());
                }
            }
            glTotalAmount = amount;
            $('#txtLocalAmount').val(commaSeparateNumber(amount.toFixed(2)));
            $('#LocalAmount').val(amount);
            discountAmountBlur();
            DeleteGLAllocationItem(index, amount);
            $('#hdnFlag').val('-1');
        }

        function DeleteGLAllocationItem(index, amount) {

            $('#tblGLDetailstr_' + (index + 1)).css({
                'text-decoration': 'line-through',
                'color': 'red',
                'font-style': 'italic'
            });
            $('#GLTransactionDetails_' + (index + 1) + '__Status').val('False');
            $('#GLTransactionDetails_0__DebitAmount_span, #GLTransactionDetails_0__TotalAmount_span').text(amount);
            $('#GLTransactionDetails_0__DebitAmount, #GLTransactionDetails_0__TotalAmount').val(amount);
        }

        function btnClearDetailsClick() {
            $('#AccountCode').val("");
            $('#AccountCode').select2();
            $('#txtAmount').val('');
            $('#hdnFlag').val('-1');
            $('#btnAddDetailsSpan').text('Add Details');
            $('#btnClearDiv').fadeOut();
        }

        function SummaryCalculation() {

            var table = $('#tblItem').DataTable();

            var totalprice = 0;
            var totaldiscAmt = 0;
            var paymentAmt = 0;
            var totalAmount = 0;
            //var totalpartialAmt = 0;
            //table.column(3).data()
            //    .each(function (value, index) {
            //        totalprice += Number($(value).val());
            //    });
            table.column(5).data()
                .each(function (value, index) {
                    var controlid = "#" + $(value).attr("id");
                    totalAmount += Number($(controlid).val());
                });


            //totaldiscAmt = totalprice - totalAmount;
            totaldiscAmt = 0;

            $("#LocalAmount").val(totalAmount);
            $("#txtTotalDiscount").val(totaldiscAmt);

            $("#txtPaymentAmount").val(totalAmount);




            // Calculate TAX Amount ( 7% )
            if ($("#chkVAT").is(':checked')) {
                CalculateVAT(true);
            }
            else {
                CalculateVAT(false);
            }

        }


        function commaSeparateNumber(val) {
            while (/(\d+)(\d{3})/.test(val.toString())) {
                val = val.toString().replace(/(\d+)(\d{3})/, '$1' + ',' + '$2');
            }
            return val;
        }

        function discountAmountBlur() {
            var totalAmount = parseFloat($('#LocalAmount').val());
            var discountAmount = parseFloat($('#DiscountAmount').val());
            $('#txtPaymentAmount').val(commaSeparateNumber((totalAmount - discountAmount).toFixed(2)));
            $('#PaymentAmount').val(totalAmount - discountAmount);



            ProcessWithHoldingTax($('#IsVAT').is(':checked'));

        }

        function ProcessWithHoldingTax(isChecked) {
            var vatValue = 0;
            if (isChecked) {
                vatValue = $('#SelectVat').val();
                if (vatValue == '') {
                    vatValue = 0;
                }
            }

            var paymentAmount = parseFloat($('#PaymentAmount').val());
            var vatAmount = CalculateVat(parseInt(vatValue));

            $('#txtTaxAmount').val(commaSeparateNumber(vatAmount));
            $('#TaxAmount').val(vatAmount);

            $('#txtTotalAmount').val(commaSeparateNumber((paymentAmount - vatAmount).toFixed(2)));
            $('#TotalAmount').val(paymentAmount - vatAmount);

            $.ajax({
                url: '@Url.Content("~/CB/GetAPWHTaxAccount")',
                method: 'GET',
                dataType: 'json',
                contentType: 'application/json',
                success: function (data) {
                    var bankAccount = data.bankAccount;
                    
                    if (isChecked) {
                        var whRowIndex = $('.tblGLDetailsCss').length - 1;
                        var isVatFooter = ($('.footerCss').length == 0);

                        var flag = $('.whFooterCss').length;
                        if (flag > 0) {
                            var tempIndex = $('.whFooterCss')[0].id.split('_');
                            whRowIndex = tempIndex[1];
                        }
                        else {
                            if (isVatFooter)
                                whRowIndex = whRowIndex + 1;
                            else
                                whRowIndex = whRowIndex + 2;
                        }

                        var whRowAccountCode = bankAccount;
                        var whRowDebitAmount = parseFloat($('#TaxAmount').val()).toFixed(2);
                        var whRow = [
                                '<input id="GLTransactionDetails_' + whRowIndex + '__DocumentNo" class="footerCss whFooterCss" name="GLTransactionDetails[' + whRowIndex + '].DocumentNo" type="hidden" value="">' +
                                '<input id="GLTransactionDetails_' + whRowIndex + '__ItemNo" name="GLTransactionDetails[' + whRowIndex + '].ItemNo" type="hidden" value="' + whRowIndex + '">' +
                                '<input id="GLTransactionDetails_' + whRowIndex + '__DocumentType" name="GLTransactionDetails[' + whRowIndex + '].DocumentType" type="hidden" value="AP">' +
                                '<input id="GLTransactionDetails_' + whRowIndex + '__AccountCode" name="GLTransactionDetails[' + whRowIndex + '].AccountCode" type="hidden" value="' + whRowAccountCode + '">' +
                                '<span id="GLTransactionDetails_' + whRowIndex + '__AccountCode_span">' + whRowAccountCode + '</span>',

                                '<input id="GLTransactionDetails_' + whRowIndex + '__CreditAmount" name="GLTransactionDetails[' + whRowIndex + '].CreditAmount" type="hidden" value="' + (data.accountType == 'CREDIT' ? whRowDebitAmount : 0.00) + '">' +
                                '<span id="GLTransactionDetails_' + whRowIndex + '__CreditAmount_span">' + (data.accountType == 'CREDIT' ? parseFloat(whRowDebitAmount).toFixed(2) : 0.00) + '</span>',

                                '<input id="GLTransactionDetails_' + whRowIndex + '__DebitAmount" name="GLTransactionDetails[' + whRowIndex + '].DebitAmount" type="hidden" value="' + (data.accountType == 'DEBIT' ? whRowDebitAmount : 0.00) + '">' +
                                '<span id="GLTransactionDetails_' + whRowIndex + '__DebitAmount_span">' + (data.accountType == 'DEBIT' ? parseFloat(whRowDebitAmount).toFixed(2) : 0.00) + '</span>',

                                '<input id="GLTransactionDetails_' + whRowIndex + '__TotalAmount" name="GLTransactionDetails[' + whRowIndex + '].TotalAmount" type="hidden" value="' + whRowDebitAmount + '">' +
                                '<span id="GLTransactionDetails_' + whRowIndex + '__TotalAmount_span">' + whRowDebitAmount + '</span>' +
                                '<input id="GLTransactionDetails_' + whRowIndex + '__Status" name="GLTransactionDetails[' + whRowIndex + '].Status" type="hidden" value="True">'
                        ];

                        var whRowHtml = '<td>' + whRow[0] + '</td><td>' + whRow[1] + '</td><td>' + whRow[2] + '</td><td>' + whRow[3] + '</td>'
                        $('#whRow').html(whRowHtml).show();
                    }
                    else {
                        $('#whRow').hide();

                        if ($('.whFooterCss').length > 0) {
                            var tempIndex = $('.whFooterCss')[0].id.split('_');
                            whRowIndex = tempIndex[1];

                            $('#whRow').html('<input type="hidden" name="GLTransactionDetails[' + whRowIndex + ']" />');
                        }
                    }
                    
                    if ($('#isVat2').is(':checked')) {
                        isVat2($('#isVat2').is(':checked'));
                    }
                    else {
                        $('#vatRow').empty();
                    }
                }
            });


            }

            function chkChange(el) {
                ProcessWithHoldingTax(el.checked);
            }

            function CalculateVat(vat) {
                var paymentAmount = parseFloat($('#PaymentAmount').val());
                return ((paymentAmount * vat) / 100);
            }

            function SelectVatOnChange(el) {
                var ischecked = $('#IsVAT').is(':checked');
                if (ischecked)
                    ProcessWithHoldingTax(true);
                //$('#IsVAT').removeAttr('checked');

                //$('#txtTaxAmount').val('');
                //$('#TaxAmount').val(0);

                //$('#txtTotalAmount').val('');
                //$('#TotalAmount').val(0);
            }

            function SearchBox(SearchTable) {
                sessionStorage.setItem('SsnSearchTbl', SearchTable);
                var Obj = {
                    SearchTable: SearchTable,
                    whereclause: '',
                    txtSearch: '',
                    SearchBy: ''
                };

                Search(Obj);
            }

            function Search(Obj) {
                $('#modalBody').empty().css('display', 'none');
                $('#modalAni').html('<i class="fa fa-refresh fa-spin"></i>');

                $('#mySearch').modal('show');

                if (Obj.SearchTable == 'VesselSchedule') {
                    var VoyageObj = {
                        BranchId: '240',
                        AgentCode: $('#bookingHeader_AgentCode').val(),
                        BookingType: $('#bookingHeader_BookingType').val(),
                        VesselCode: $('#bookingHeader_VesselCode').val(),
                        ETA: '',
                        searchVm: Obj
                    };

                    VoyageSearch(VoyageObj);
                }
                else
                    ajaxCall(Obj);
            }

            function ajaxCall(Obj) {
                $.ajax({
                    type: 'POST',
                    url: searchBoxUrl,
                    dataType: 'html',
                    data: JSON.stringify(Obj),
                    contentType: 'application/json; charset=utf-8',
                    success: function (data) {
                        $('#modalAni').empty();
                        $('#modalBody').html(data).slideDown(700);
                    },
                    error: function (err) {

                    }
                });
            }

            function trClick(rowId, searchTable) {
                var Obj = $('#' + rowId);
                var documentNo = Obj.data('document-no');
                location.href = '@Url.Content("~/Ap/Invoice?documentNo=")' + documentNo;

            }

            function srchTerm_KeyPress(evt) {
                if (evt.which == 13) {
                    btnSearchClick();
                    return false;
                }
            }

            /* 06-15-2016 */
            function isVat2Change(el) {
                isVat2($('#isVat2').is(':checked'));
            }

            function isVat2(isChecked) {
                
                var localAmount = parseFloat($('#LocalAmount').val());
                var TotalAmount = parseFloat($('#TotalAmount').val());
                var vatAmount = getVat(localAmount);

                $.ajax({
                    url: '@Url.Content("~/CB/GetAPVatTaxAccount")',
                method: 'GET',
                dataType: 'json',
                contentType: 'application/json',
                success: function (data) {
                    var bankAccount = data.bankAccount;
                    if (isChecked) {

                        $('#txtVatAmount').val(vatAmount.toFixed(2));
                        $('#VatAmount').val(vatAmount);

                        $('#txtTotalAmount').val(commaSeparateNumber((TotalAmount + vatAmount).toFixed(2)));
                        $('#TotalAmount').val(TotalAmount + vatAmount);

                        var vatRowIndex = $('.tblGLDetailsCss').length - 1;
                        var isWHFooter = ($('.footerCss').length == 0);

                        var flag = $('.vatFooterCss').length;
                        if (flag > 0) {
                            var tempIndex = $('.vatFooterCss')[0].id.split('_');
                            vatRowIndex = tempIndex[1];
                        }
                        else {
                            if (isWHFooter)
                                vatRowIndex = vatRowIndex + 1;
                            else {
                                vatRowIndex = vatRowIndex + 2;
                            }
                        }

                        var vatRowAccountCode = bankAccount;
                        var vatRowDebitAmount = vatAmount.toFixed(2);
                        var vatRow = [
                                '<input id="GLTransactionDetails_' + vatRowIndex + '__DocumentNo" class="footerCss vatFooterCss" name="GLTransactionDetails[' + vatRowIndex + '].DocumentNo" type="hidden" value="">' +
                                '<input id="GLTransactionDetails_' + vatRowIndex + '__ItemNo" name="GLTransactionDetails[' + vatRowIndex + '].ItemNo" type="hidden" value="' + vatRowIndex + '">' +
                                '<input id="GLTransactionDetails_' + vatRowIndex + '__DocumentType" name="GLTransactionDetails[' + vatRowIndex + '].DocumentType" type="hidden" value="AP">' +
                                '<input id="GLTransactionDetails_' + vatRowIndex + '__AccountCode" name="GLTransactionDetails[' + vatRowIndex + '].AccountCode" type="hidden" value="' + bankAccount + '">' +
                                '<span id="GLTransactionDetails_' + vatRowIndex + '__AccountCode_span">' + bankAccount + '</span>',

                                '<input id="GLTransactionDetails_' + vatRowIndex + '__CreditAmount" name="GLTransactionDetails[' + vatRowIndex + '].CreditAmount" type="hidden" value="' + (data.accountType == 'CREDIT' ? vatRowDebitAmount : 0.00) + '">' +
                                '<span id="GLTransactionDetails_' + vatRowIndex + '__CreditAmount_span">' + (data.accountType == 'CREDIT' ? vatRowDebitAmount : 0.00) + '</span>',

                                '<input id="GLTransactionDetails_' + vatRowIndex + '__DebitAmount" name="GLTransactionDetails[' + vatRowIndex + '].DebitAmount" type="hidden" value="' + (data.accountType == 'DEBIT' ? vatRowDebitAmount : 0.00) + '">' +
                                '<span id="GLTransactionDetails_' + vatRowIndex + '__DebitAmount_span">' + (data.accountType == 'DEBIT' ? vatRowDebitAmount : 0.00) + '</span>',

                                '<input id="GLTransactionDetails_' + vatRowIndex + '__TotalAmount" name="GLTransactionDetails[' + vatRowIndex + '].TotalAmount" type="hidden" value="' + vatRowDebitAmount + '">' +
                                '<span id="GLTransactionDetails_' + vatRowIndex + '__TotalAmount_span">' + vatRowDebitAmount + '</span>' +
                                '<input id="GLTransactionDetails_' + vatRowIndex + '__Status" name="GLTransactionDetails[' + vatRowIndex + '].Status" type="hidden" value="True">'
                        ];

                        var vatRowHtml = '<td>' + vatRow[0] + '</td><td>' + vatRow[1] + '</td><td>' + vatRow[2] + '</td><td>' + vatRow[3] + '</td>'
                        $('#vatRow').html(vatRowHtml).show();
                    }
                    else {
                        $('#txtVatAmount').val('0.00');
                        $('#VatAmount').val(0.00);

                        $('#txtTotalAmount').val(commaSeparateNumber((TotalAmount - vatAmount).toFixed(2)));
                        $('#TotalAmount').val(TotalAmount - vatAmount);

                        if ($('.vatFooterCss').length > 0) {
                            var tempIndex = $('.vatFooterCss')[0].id.split('_');
                            vatRowIndex = tempIndex[1];

                            $('#vatRow').html('<input type="hidden" name="GLTransactionDetails[' + vatRowIndex + ']" />').hide();
                        }
                    }
                }
            });

        }

        function getVat(localAmount) {
            return ((localAmount / 100) * 7);
        }

    </script>
}
