@model POSAccount.Contract.CBReceipt

@{
    ViewBag.Title = "CBReceipt";
}
@section CssSection
{
  

    <style type="text/css">
        #tblQuotationItem_filter input {
            width: 70%;
        }

        #tblQuotationItem_filter, #tblQuotationItem_paginate {
            float: right;
        }

        #tblQuotationItem_length select.input-sm {
            width: 40%;
        }

        /*.DisableBackground {
        background: transparent none repeat scroll 0 0;
        border: none;
    }*/
    </style>
}
<div class="modal fade in" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>


<div class="modal fade" id="mySearch">
    <div class="modal-dialog modal-lg generated_frm">
        <div class="modal-content form-horizontal">
            <div class="modal-header">
                <button aria-label="Close" data-dismiss="modal" class="close" type="button"><i class="fa fa-times"></i></button>
                <h4 class="modal-title">Search&nbsp;&nbsp;<span id="modalAni"><i class="fa fa-refresh fa-spin"></i></span></h4>
            </div>
            <div id="modalBody" style="display: none;"></div>
            <div class="modal-footer">
                <button data-dismiss="modal" class="btn btn-default" type="button"><i class="fa fa-times"></i>&nbsp;Close</button>
            </div>
        </div>
        
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>


@*@using (Html.BeginForm("SaveCBReceipt", "CB", new { area = "CB" }, FormMethod.Post, new { id = "frmCBPayment" }))*@
@using (Ajax.BeginForm("SaveCBReceipt", "CB", new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSaveSuccess", OnFailure = "OnMethodFailure" }, new { enctype = "multipart/form-data", id = "myForm" }))
{
    <div class="box box-solid box-default">
        <div class="box-header with-border">
            <h3 class="box-title">CB Receipt</h3>
            <div class="box-tools pull-right">
                <div class="has-feedback">
                    <div class="input-group input-group-sm">
                        <input id="txtSearch" class="form-control" type="text" placeholder="Search Receipt" />
                        <span class="input-group-btn" style="width: 70px">
                            <div class="btn-group">
                                <button class="btn btn-info btn-flat" type="button" onclick="SearchBox('CBReceipt')"><i class="fa fa-search"></i></button>
                            </div>
                        </span>
                    </div>
                </div>
            </div>
        </div>
        <div class="box-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Receipt Type</label>
                        <div class="col-md-2">
                            @Html.DropDownListFor(m => m.ReceiptType, Model.ReceiptTypeList, "", new { @class = "form-control select2 select2-hidden-accessible;", @onchange = "OnReceiptTypeChange()" })

                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Payment Date</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.DocumentDate, new { @placeholder = "Document Date", @id = "txtDocumentDate", @class = "form-control input-sm datepicker" })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Receipt No.</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.DocumentNo, new { @id = "txtDocumentNo", @class = "form-control input-sm", @readonly = "readonly" })
                        </div>


                    </div>
                </div>


                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Debtor Code</label>
                        <div class="col-md-6">
                            @Html.DropDownListFor(m => m.DebtorCode, Model.DebtorList, "", new { @class = "form-control input-sm", @id = "ddlDebtor" })
                        </div>


                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Total Receipt Amount</label>
                        <div class="col-md-2">

                            @*<input type="text" class="form-control input-sm" id="txtInvoiceNo" placeholder="0.00">*@
                            @Html.TextBoxFor(m => m.LocalReceiptAmount, new { @placeholder = "Payment Amount", @id = "txtLocalReceiptAmount", @class = "form-control input-sm" })
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Bank Code</label>
                        <div class="col-md-2">
                            @Html.DropDownListFor(m => m.BankCode, Model.BankCodeList, "", new { @placeholder = "Bank Code", @class = "form-control select2 select2-hidden-accessible;" })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Cheque No</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.ChequeNo, new { @placeholder = "Cheque No", @id = "txtChequeNo", @class = "form-control input-sm" })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Cheque Date</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.ChequeDate, new { @placeholder = "Cheque Date", @id = "txtChequeDate", @class = "form-control input-sm datepicker" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 input-sm control-label">Account Date</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.AccountDate, new { @placeholder = "Account Date", @id = "txtAccountDate", @class = "form-control input-sm datepicker" })
                        </div>
                        <label for="txtCompany" class="col-md-2 input-sm control-label">Remark</label>
                        <div class="col-md-6">
                            @Html.TextBoxFor(m => m.Remark, new { @placeholder = "Remark", @id = "txtRemark", @class = "form-control input-sm" })
                        </div>
                    </div>
                </div>



                <div id="MyTabSelector" class="nav-tabs-custom">
                    <ul class="nav nav-tabs">
                        <li class="active">
                            <a href="#tbDetails" data-toggle="tab">CBPayment Details</a>
                        </li>
                        <li class="">
                            <a href="#tbSetOffDetails" data-toggle="tab">Set Off Details</a>
                        </li>
                        <li class="">
                            <a href="#tbGLDetails" data-toggle="tab">GL Allocation</a>
                        </li>
                        <li class="pull-right">
                            <div class="btn-group btn-primary">                                
                                <a class="btn btn-small btn-primary" data-modal="" href="@Url.Content("~/CB/AddCBReceiptItem?itemno=-1")" id="btncreate1"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;add details</a>

                            </div>
                        </li>
                    </ul>
                    <!-- Display List Section -->
                    <div class="tab-content">
                        <div class="tab-pane active" id="tbDetails">
                            <table id="tblQuotationItem" class="table table-striped table-hover table-bordered table-responsive ">

                                <thead style="background-color: steelblue; color: white; font-size: 12px;">

                                    <tr>
                                        <th class="hidden">DocumentNo</th>
                                        <th class="hidden">ItemNo</th>
                                        <th class="hidden">Charge Code</th>
                                        <th>Account Code</th>
                                        <th>Remark</th>
                                        <th>Currency Code</th>
                                        <th>Base Amount</th>
                                        <th>Local Amount</th>
                                        <th>SetOff Date</th>
                                        <th>Action</th>
                                    </tr>

                                </thead>

                                <tbody style="font-size: 12px;">
                                    @{
    for (int i = 0; i < Model.CBReceiptDetails.Count; i++)
    {
                                        <tr id="tr_@i">
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].DocumentNo)
                                            </td>
                                            <td class='hidden' name="ItemNo">
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].ItemNo)
                                            </td>
                                            <td name="DebtorCode" class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].DebtorCode)
                                            </td>
                                            <td name="AccountCode">
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].AccountCode)
                                                @Html.DisplayFor(m => m.CBReceiptDetails[i].AccountCode)
                                            </td>

                                            <td name="Remark">
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].Remark)
                                                @Html.DisplayFor(m => m.CBReceiptDetails[i].Remark)
                                            </td>
                                            <td name="CurrencyCode">
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].CurrencyCode)
                                                @Html.DisplayFor(m => m.CBReceiptDetails[i].CurrencyCode)
                                            </td>
                                            <td name="BaseAmount">
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].BaseAmount)
                                                @Html.DisplayFor(m => m.CBReceiptDetails[i].BaseAmount)
                                            </td>
                                            <td name="LocalAmount">
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].LocalAmount)
                                                @Html.DisplayFor(m => m.CBReceiptDetails[i].LocalAmount)
                                            </td>
                                            <td name="SetOffDate">
                                                @Html.HiddenFor(m => m.CBReceiptDetails[i].SetOffDate)
                                                @Html.DisplayFor(m => m.CBReceiptDetails[i].SetOffDate)
                                            </td>

                                            <td name="Action">
                                                @Html.ActionLink(" ", "AddCBReceiptItem", "CB", new { area = "CB", documentNo = Model.CBReceiptDetails[i].DocumentNo, itemNo = Model.CBReceiptDetails[i].ItemNo }, new { @class = "anchor-image", data_modal = "", onclick = "linkClicked(" + i + ")" })
                                                <img class="img-class" onclick="DeleteCBReceiptDetails(this,'@Model.CBReceiptDetails[i].DocumentNo')" src="~/Images/Delete.png" />
                                            </td>

                                        </tr>
    }
                                    }
                                </tbody>
                            </table>
                        </div>



                        <!--Set Off Details-->
                        <div id="tbSetOffDetails" class="tab-pane">
                            <table id="tblSetoffItem" class="table table-striped table-hover table-bordered table-responsive ">
                                <thead style="background-color: steelblue; color: white; font-size: 12px;">

                                    <tr>
                                        <th class="hidden">DocumentNo</th>
                                        <th class="hidden">ItemNo</th>
                                        <th class="hidden">MatchDocumentType</th>
                                        <th class="hidden">MatchDocumentDate</th>
                                        <th>Document No</th>
                                        <th>Local Amount</th>
                                        <th>Local Apply Amount</th>
                                        <th>SetOff Date</th>

                                    </tr>
                                </thead>
                                <tbody style="font-size: 12px;">

                                    @{
    for (int i = 0; i < Model.CBReceiptSetOffDetails.Count; i++)
    {
                                        <tr id="tr_@i">
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].DocumentNo)
                                            </td>
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].ItemNo)
                                            </td>
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].MatchDocumentType)
                                            </td>
                                            <td name="MatchDocumentDate">
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].MatchDocumentDate)
                                                @Html.DisplayFor(m => m.CBReceiptSetOffDetails[i].MatchDocumentDate)
                                            </td>
                                            <td name="MatchDocumentNo">
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].MatchDocumentNo)
                                                @Html.DisplayFor(m => m.CBReceiptSetOffDetails[i].MatchDocumentNo)
                                            </td>
                                            <td name="LocalAmount">
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].LocalAmount)
                                                @Html.DisplayFor(m => m.CBReceiptSetOffDetails[i].LocalAmount)
                                            </td>
                                            <td name="LocalApplyAmount">
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].LocalApplyAmount)
                                                @Html.DisplayFor(m => m.CBReceiptSetOffDetails[i].LocalApplyAmount)
                                            </td>
                                            <td name="SetOffDate">
                                                @Html.HiddenFor(m => m.CBReceiptSetOffDetails[i].SetOffDate)
                                                @Html.DisplayFor(m => m.CBReceiptSetOffDetails[i].SetOffDate)
                                            </td>

                                        </tr>
    }
                                    }
                                </tbody>
                            </table>

                        </div>

                        <!--Set Off Details-->
                        <div id="tbGLDetails" class="tab-pane">
                            <table id="tblGLDetails" class="table table-striped table-hover table-bordered table-responsive ">
                                <thead style="background-color: steelblue; color: white; font-size: 12px;">

                                    <tr>
                                        <th class="hidden">DocumentNo</th>
                                        <th class="hidden">ItemNo</th>
                                        <th class="hidden">TransactionType</th>
                                        <th>Account Code</th>
                                        <th>Debit Amount</th>
                                        <th>Credit Amount</th>
                                        <th>Total Amount</th>

                                    </tr>
                                </thead>
                                <tbody style="font-size: 12px;">

                                    @{
    for (int i = 0; i < Model.CBReceiptGLDetails.Count; i++)
    {
                                        <tr id="tr_@i">
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptGLDetails[i].DocumentNo)
                                            </td>
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptGLDetails[i].ItemNo)
                                            </td>
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.CBReceiptGLDetails[i].TransactionType)
                                            </td>
                                            <td name="AccountCode">
                                                @Html.HiddenFor(m => m.CBReceiptGLDetails[i].AccountCode)
                                                @Html.DisplayFor(m => m.CBReceiptGLDetails[i].AccountCode)
                                            </td>
                                            <td name="LocalAmount">
                                                @Html.HiddenFor(m => m.CBReceiptGLDetails[i].LocalAmount)
                                                @Html.DisplayFor(m => m.CBReceiptGLDetails[i].LocalAmount)
                                            </td>
                                            <td name="TaxAmount">
                                                @Html.HiddenFor(m => m.CBReceiptGLDetails[i].TaxAmount)
                                                @Html.DisplayFor(m => m.CBReceiptGLDetails[i].TaxAmount)
                                            </td>
                                            <td name="TotalAmount">
                                                @Html.HiddenFor(m => m.CBReceiptGLDetails[i].TotalAmount)
                                                @Html.DisplayFor(m => m.CBReceiptGLDetails[i].TotalAmount)
                                            </td>


                                        </tr>
    }
                                    }
                                </tbody>
                            </table>

                        </div>
                    </div>
                </div>
            </fieldset>
        </div>



        <div class="box-footer">
            <div class="row  no-print">
                <div class="col-xs-12">
                    <a href="@Url.Action("CBReceipt", "CB", new { area = "CB", CBReceiptType = "NEW" }, null)" class="btn btn-social btn-primary">
                        <i class="fa fa-file-o"></i>
                        New
                    </a>
                    <button type="submit" id="btnSave" class="btn btn-social btn-success">
                        <i class="fa fa-save"></i>
                        Save
                    </button>


                    <a href="#" class="btn btn-social btn-default">
                        <i class="fa fa-close"></i>
                        Clear
                    </a>
                    <a href="#" id="btnDelete" onclick="DeleteCBReceipt('@Model.DocumentNo')" class="btn btn-social btn-danger">
                        <i class="fa fa-times-circle"></i>
                        Delete
                    </a>

                    <div class="btn-group dropup">
                        @Html.ActionLink("Reports", "ViewReport", "POSReport", new { area = "POSReport", reportSource = "CBReceipt", DocumentId = Model.DocumentNo, URL = "/POSReports/CBReceipt" }, new { data_modal = "test", id = "btnViewReport", @class = "btn btn-small btn-primary" })
                        <button type="button" class="btn btn-social btn-primary"><i class="fa fa-print"></i>Print</button>
                        <button type="button" class="btn btn-primary dropdown-toggle" data-toggle="dropdown">
                            <span class="caret"></span>
                            <span class="sr-only">Toggle Dropdown</span>
                        </button>
                        <ul class="dropdown-menu" role="menu">
                            <li><a href="#"><i class="fa fa-file-pdf-o"></i>Pdf</a> </li>
                            <li><a href="#"><i class="fa fa-file-excel-o"></i>Excel</a> </li>
                            <li><a href="#"><i class="fa fa-file-word-o"></i>Word</a> </li>

                        </ul>
                    </div>
                    <a href="#" id="btnBack" class="btn btn-social btn-info pull-right">
                        <i class="fa fa-arrow-circle-o-left"></i>
                        Back
                    </a>
                </div>
            </div>
        </div>
    </div>
}



<link rel="stylesheet" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">

@*<div class="modal fade in" id="ReportViewerModal">
        <div class="modal-dialog">
            <div class="modal-content">
                <div id='ReportViewerContent'></div>
            </div>
        </div>
    </div>*@


@section Scripts{
    
    <script type="text/javascript">

      

        $(function () {

            var searchBoxUrl = '@Url.Content("~/search/SearchBox")';
            var _selectedDocumentNoId;
            var DocumentNo;

            $('.datepicker').datetimepicker({
                useCurrent: false,
                maxDate: moment('@DateTime.Now.ToString("dd/MM/yyyy")'),
            format: 'DD/MM/YYYY',
            inline: false
        });

            $("#ddlDebtor").select2();

            $("#txtSearch").autocomplete({
                minLength: 2,
                source: function (request, response) {
                    $.ajax({
                        url: "/CB/SearchItem", type: "GET", dataType: "json",
                        data: { searchText: request.term, limitRecords: -1, source: "ARInvoice" },
                        async: true,
                        success: function (data) {
                            debugger;
                            //
                            //$.each(data, function (a, b) {
                            //    debugger;
                            //response(  $.each(data, function (a, b) {
                            //    return { label: b.DocumentNo, value: b.DocumentNo }
                            //}))


                            response($.map(data, function (item) {
                                return { label: item[0].DocumentNo, value: item[0].DocumentNo }

                            }))
                            //})

                        }
                    })
                },
                select: function (event, ui) {
                    _selectedDocumentNoId = ui.item.value;
                    debugger;
                    $("#btnSearch").href = "/CB/CBReceipt?DocumentNo=" + _selectedDocumentNoId;
                    $("#btnSearch").attr("href", "/CB/CBReceipt?DocumentNo=" + _selectedDocumentNoId)
                    //$("#btnSearch").href
                    setTimeout(function () {
                        $("#txtSearch").val(ui.item.label);
                    }, 100)

                    return false;

                }
            });


        });

        $(document).ready(function () {
            if ('@Model.IsCancel' == 'True') {
                $("#txtDocumentNo").addClass("StrikeOut")
                $("#btnSave").attr("disabled", " disabled")
                $("#btnApprove").attr("disabled", " disabled")
            }

            $('#tblQuotationItem').DataTable({
                responsive: true
            });


            //$('.datepicker').datepicker({
            //    dateFormat: 'dd/mm/yy'
            //});
            //$('#MyTabSelector').enableTab(1);

            if ($("#ReceiptType").val() == "DEBTOR") {
                $('[href="#tbDetails"]').closest('li').hide();
                $('a[href="#tbSetOffDetails"]').tab('show');
                $('[href="#tbGLDetails"]').closest('li').show();
            }


        });


        function OnReceiptTypeChange() {

            if ($("#ReceiptType option:selected").text() == "DEBTOR") {
                $('[href="#tbDetails"]').closest('li').hide();
                $('[href="#tbSetOffDetails"]').closest('li').show();
                $('a[href="#tbSetOffDetails"]').tab('show');

                $('[href="#tbGLDetails"]').closest('li').show();
            }
            else if ($("#ReceiptType option:selected").text() == "OTHERS") {

                $('[href="#tbSetOffDetails"]').closest('li').hide();
                $('a[href="#tbDetails"]').closest('li').show();
                $('a[href="#tbDetails"]').tab('show');
                $('[href="#tbGLDetails"]').closest('li').hide();
            }
        }

        $("#btnSave").on("click", function (e) {
            var oTable = $('#tblQuotationItem').dataTable();
            if (oTable.fnGetData().length <= 0) {
                alert("Please add atleast one CBReceipt details.")
                return false;
            }

        })

        $("#btnCreate1").on("click", function (e) {
            isEditLocal = false;
        })



        function OnMethodFailure(result) {
            ModalShow(result.Message, "Failure", "Save");
        }

        function OnSaveSuccess(result) {
            ModalShow(result.Message, "Success", "Save");
            //debugger;
            DocumentNo = result.CBReceiptdata.DocumentNo;
        }

        function BtnOK() {
            if (ActionType == "Save") {
                location.href = "/CB/CBReceipt?DocumentNo=" + DocumentNo;
            }
        }



        function Search() {
            var _selectedDocumentNoId = $("#txtSearch").val();
            $("#btnSearch").href = "/CB/CBSearchReceipt?DocumentNo=" + _selectedDocumentNoId;
            $("#btnSearch").attr("href", "/CB/CBSearchReceipt?DocumentNo=" + _selectedDocumentNoId)

            return true;
        }

        var isEditLocal = false;
        var rowdetails;


        //$(".datepicker").datetimepicker({
        //    format: "DD/MM/YYYY",
        //    minDate: '1900/01/01'
        //});


        function EditCBReceiptDetails(t, rowCount, qno, elocal) {

            rowdetails = t;
            if (elocal == "1") {
                isEditLocal = true;
            }
            if (linkedIndex == null) {
                linkedIndex = rowCount;
            }
            if (qno == 0) {
                var row = $(t).closest("tr").get(0);
                var oTable = $('#tblQuotationItem').DataTable();
                var ids = $.map(oTable.rows(row).data(), function (item) {
                    var c = new Array();
                    debugger;
                    c = [$(item[0]).val(), $(item[1]).val(), $(item[2]).val(), $(item[3]).val(), $(item[4]).val(), $(item[5]).val(), $(item[6]).val(), $(item[7]).val(), $(item[8]).val()];
                    return c
                });

                if (ids[0] == "" || ids[0] == "0") {
                    setTimeout(function () {
                        $("#AccountCode").val(ids[3])
                        $("#Remark").val(ids[4])
                        $("#CurrencyCode").val(ids[5])
                        $("#BaseAmount").val(ids[6])
                        $("#LocalAmount").val(ids[7])
                        $("#SetOffDate").val(ids[8])
                    }, 100)
                    return false;
                }

            }
            $("a[data-modal]").on("click", function (e) {
                return OpenModalPopup(this, e);
            });
        }



        function DeleteCBReceiptDetails(t, QuotationItemId, qno) {
            if (!confirm("Do you want to delete QuotationItem?")) {
                return false;
            }
            debugger;
            var row = $(t).closest("tr").get(0);
            var oTable = $('#tblQuotationItem').dataTable(); // JQuery dataTable function to delete the row from the table
            oTable.fnDeleteRow(oTable.fnGetPosition(row));
        }

        $('#tblQuotationItem tbody').on('click', 'tr', function () {
            var table = $('#tblQuotationItem').DataTable();
        });


        function linkClicked(li) {
            linkedIndex = li;
            isEditLocal = true;
        }

        function AddDataToTable() {

            var tblData = new Array();
            debugger;
            var qno = $("#hdnQuotationNo").val();
            qno = "";

            var rowCount = 0;
            if ($('#tblQuotationItem').dataTable().fnSettings().aoData.length > 0) {
                rowCount = $('#tblQuotationItem tr').length - 1;;
            }
            if ((qno != null && qno != "") || isEditLocal) {
                rowCount = rowCount - 1;
            }
            var rowData = [
                "<input id='CBReceiptDetails[" + rowCount + "].DocumentNo' type='hidden' value=" + 0 + " name='CBReceiptDetails[" + rowCount + "].DocumentNo'>"
               , "<input id='CBReceiptDetails[" + rowCount + "].OrderNo' type='hidden' value=' ' name='CBReceiptDetails[" + rowCount + "].ItemNo'>"
               , "<input id='CBReceiptDetails[" + rowCount + "].DebtorCode' type='hidden' value=' ' name='CBReceiptDetails[" + rowCount + "].DebtorCode'>"
               , "<input id='CBReceiptDetails[" + rowCount + "].AccountCode' type='hidden' value=" + this.AccountCode.value + " name='CBReceiptDetails[" + rowCount + "].AccountCode'>" + this.AccountCode.value
               , "<input id='CBReceiptDetails[" + rowCount + "].Remark' type='hidden' value=" + this.Remark.value + " name='CBReceiptDetails[" + rowCount + "].Remark'>" + this.Remark.value
                , "<input id='CBReceiptDetails[" + rowCount + "].CurrencyCode' type='hidden' value=" + this.CurrencyCode.value + " name='CBReceiptDetails[" + rowCount + "].CurrencyCode'>" + this.CurrencyCode.value

               , "<input id='CBReceiptDetails[" + rowCount + "].BaseAmount' type='hidden' value=" + this.BaseAmount.value + " name='CBReceiptDetails[" + rowCount + "].BaseAmount'>" + this.BaseAmount.value

               , "<input id='CBReceiptDetails[" + rowCount + "].LocalAmount' type='hidden' value=" + this.LocalAmount.value + " name='CBReceiptDetails[" + rowCount + "].LocalAmount'>" + this.LocalAmount.value
               , "<input id='CBReceiptDetails[" + rowCount + "].SetOffDate' type='hidden' value=" + this.SetOffDate.value + " name='CBReceiptDetails[" + rowCount + "].SetOffDate'>" + this.SetOffDate.value
              , " <a id='CBReceiptDetails[" + rowCount + "]' href='/CB/AddCBReceiptItem?itemNo=" + rowCount + "' class='anchor-image' data-modal=''  onclick='EditCBReceiptDetails(this," + rowCount + ",0,1)' >" +
               " </a> <img src='/Images/Delete.png' onclick='DeleteCBReceiptDetails(this," + rowCount + ",0)' class='img-class'>"];

            if ((qno != null && qno != "") || isEditLocal) {
                $('#tblQuotationItem').dataTable().fnUpdate(rowData, linkedIndex);
                $('#myModal').modal('hide');
                linkedIndex = null;
            }
            else {
                var row = "";
                $('#tblQuotationItem').dataTable().fnAddData(rowData);
                $('tr td:nth-child(1)').hide()
                $('tr td:nth-child(2)').hide()
                $('tr td:nth-child(3)').hide()
            }
            var table = $('#tblQuotationItem').DataTable();
            var baseamt = 0;
            isEditLocal = false;
            $.each(table.column(6).data(), function (key, value) {
                var baseamtlocal = Number(value.substr(value.indexOf(">") + 1, 20));
                baseamt = baseamt + baseamtlocal;
            })
            $("#txtBaseAmount").val(baseamt);
            $('#myModal').modal('hide');// $('#myModalContent').modal('hide');
            $("a[data-modal]").on("click", function (e) {
                return OpenModalPopup(this, e);
            });
        }



        function DeleteCBReceipt() {
            var dno = $("#txtDocumentNo").val();
            $.ajax({
                url: "/CB/DeleteCBReceipt", type: "POST", dataType: "json",
                data: { DocumentNo: dno, CancelBy: "" },
                async: true,
                success: function (response) {
                    if (response.result) {
                        ModalShow(response.Message, "Success", "Delete");
                        $("#txtDocumentNo").addClass("StrikeOut")
                        $("#btnSave").attr("disabled", " disabled")
                        $("#btnApprove").attr("disabled", " disabled")

                    } else {
                        ModalShow(response.Message, "Failure", "Delete");
                    }
                }
            })
        }


        $('#ddlDebtor').on("select2:select", function (e) {
            // what you would like to happen
            var debtorCode = $('#ddlDebtor').val();

            var rooturl = "@Url.Action("GetDebtorOutStandingDocuments", "CB", new { area = "CB" })"
            var url = rooturl + "?debtorCode=" + debtorCode;

            $.post(url, null, function (data) {
                AddDataToTableforSetOffDetails(data.SetOffDetailsData);
            });


        });

        function AddDataToTableforSetOffDetails(data) {

            var tblData = new Array();
            var qno = $("#hdnQuotationNo").val();

            for (var i = 0; i < data.length; i++) {

                var rowCount = 0;
                if ($('#tblSetoffItem').dataTable().fnSettings().aoData.length > 0) {
                    rowCount = $('#tblSetoffItem tr').length - 1;;
                }
                var rowData = [
                    "<input id='CBPaymentSetOffDetails[" + rowCount + "].DocumentNo' type='hidden' value=" + data[i].DocumentNo + " name='CBReceiptDetails[" + rowCount + "].DocumentNo'>"
                   , "<input id='CBReceiptDetails[" + rowCount + "].ItemNo' type='hidden' value=" + data[i].ItemNo + " name='CBReceiptDetails[" + rowCount + "].ItemNo'>"
                   , "<input id='CBReceiptDetails[" + rowCount + "].MatchDocumentType' type='hidden' value=" + data[i].MatchDocumentType + "  name='CBReceiptDetails[" + rowCount + "].MatchDocumentType'>"
                   , "<input id='CBReceiptDetails[" + rowCount + "].MatchDocumentDate' type='hidden' value=" + data[i].MatchDocumentDate + " name='CBReceiptDetails[" + rowCount + "].MatchDocumentDate'>" + data[i].MatchDocumentDate

                   , "<input id='CBReceiptDetails[" + rowCount + "].MatchDocumentNo' type='hidden' value=" + data[i].MatchDocumentNo + " name='CBReceiptDetails[" + rowCount + "].MatchDocumentNo'>" + data[i].MatchDocumentNo
                    , "<input id='CBPaymentDetails_" + rowCount + "_LocalAmount' type='text' class='DisableBackground' value=" + data[i].LocalAmount + " readonly name='CBPaymentDetails_[" + rowCount + "].LocalAmount'>"

                   , "<input id='CBPaymentDetails_" + rowCount + "_LocalApplyAmount' onchange='AddDataForGLAllocation(this," + rowCount + ")' type='text' value='" + data[i].LocalApplyAmount + "' name='CBReceiptDetails[" + rowCount + "].LocalApplyAmount'>" //+ data[i].LocalApplyAmount

                   , "<input id='CBReceiptDetails[" + rowCount + "].SetOffDate' type='hidden' value=" + data[i].SetOffDate + " name='CBReceiptDetails[" + rowCount + "].SetOffDate'>" + data[i].SetOffDate

                ];

                if ((qno != null && qno != "") || isEditLocal) {
                    $('#tblSetoffItem').dataTable().fnUpdate(rowData, 0);
                    $('#myModal').modal('hide');
                    linkedIndex = null;
                }
                else {

                    var row = "";
                    $('#tblSetoffItem').dataTable().fnAddData(rowData);
                    $('tr td:nth-child(1)').hide()
                    $('tr td:nth-child(2)').hide()
                    $('tr td:nth-child(3)').hide()
                    $('tr td:nth-child(4)').hide()
                }
            }
        }
        function AddDataForGLAllocation(thisid, no) {
            var LocalAmountId = "#CBPaymentDetails_" + no + "_LocalAmount";

            var tblData = new Array();
            var qno = $("#hdnQuotationNo").val();
            var val = $(thisid).val();

            $(thisid).val(val);
            $(thisid).attr("value", val)

            if (Number($(LocalAmountId).val()) < Number($(thisid).val())) {
                alert("LocalApplyAmount should be less than LocalAmount");
                return false;
            }

            var table = $('#tblGLDetails').dataTable();
            var table1 = $('#tblSetoffItem').DataTable();
            var creditAmt = debitAmt = 0;
            var isUpdate = false;
            if (table.fnGetData().length >= 2) {
                isUpdate = true;

            }

            $.each($(table1.column(6).data()), function (key, value) {
                var id = "#" + $(value)[0].id;
                var baseamtlocal = Number($(id).val());
                debitAmt = debitAmt + baseamtlocal;
            })

            var totalAmt = 0;
            var AccountCode = "";

            for (var i = 0; i < 2; i++) {
                if (i == 0) {
                    creditAmt = 0
                    AccountCode = $('#ddlDebtor option:selected').text();
                } else {
                    creditAmt = debitAmt;
                    debitAmt = 0;
                    AccountCode = $('#BankCode option:selected').text();
                }
                totalAmt = debitAmt + creditAmt;
                var rowCount = 0;
                if ($('#tblGLDetails').dataTable().fnSettings().aoData.length > 0) {
                    rowCount = $('#tblGLDetails tr').length - 1;;
                }
                var rowData = [
                    "<input id='CBReceiptGLDetails[" + rowCount + "].DocumentNo' type='hidden' value=" + + " name='CBPaymentDetails[" + rowCount + "].DocumentNo'>"
                   , "<input id='CBReceiptGLDetails[" + rowCount + "].ItemNo' type='hidden' value=" + + " name='CBPaymentGLDetails[" + rowCount + "].ItemNo'>"
                   , "<input id='CBReceiptGLDetails[" + rowCount + "].TransactionType' type='hidden' value=" + + "  name='CBPaymentGLDetails[" + rowCount + "].TransactionType'>"

                   , "<input id='CBReceiptGLDetails[" + rowCount + "].AccountCode' type='hidden' value=" + AccountCode + " name='CBPaymentGLDetails[" + rowCount + "].AccountCode'>" + AccountCode

                   , "<input id='CBReceiptGLDetails[" + rowCount + "].DebitAmount' class='DisableBackground' readonly type='text' value=" + debitAmt + " name='CBPaymentGLDetails[" + rowCount + "].DebitAmount'>"

                   , "<input id='CBReceiptGLDetails[" + rowCount + "].CreditAmount' class='DisableBackground' readonly type='text' value=" + creditAmt + " name='CBPaymentGLDetails[" + rowCount + "].CreditAmount'>" //+ data[i].LocalApplyAmount

                   , "<input id='CBReceiptGLDetails[" + rowCount + "].TotalAmount' class='DisableBackground' readonly type='text' value=" + totalAmt + " name='CBPaymentGLDetails[" + rowCount + "].TotalAmount'>"

                ];

                if (isUpdate) {
                    $('#tblGLDetails').dataTable().fnUpdate(rowData, i);


                }
                else {
                    var row = "";
                    $('#tblGLDetails').dataTable().fnAddData(rowData);
                    $('tr td:nth-child(1)').hide()
                    $('tr td:nth-child(2)').hide()
                    $('tr td:nth-child(3)').hide()
                }


            }
        }

        //$("#btnViewReport").on("click", function (e) {
        //    $(e.target).closest('.btn-group').children('.dropdown-toggle').dropdown('toggle');
        //    $('#ReportViewerContent').load(this.href, function () {
        //        $('#ReportViewerModal').modal({
        //            /*backdrop: 'static',*/
        //            width: 950,
        //            keyboard: true
        //        }, 'show');

        //        //bindForm(thiso);
        //    });

        //    return false;
        //});


        /* Search Functions */

        function SearchBox(SearchTable) {
            sessionStorage.setItem('SsnSearchTbl', SearchTable);
            var Obj = {
                SearchTable: SearchTable,
                whereclause: '',
                txtSearch: '',
                SearchBy: ''
            };

            Search(Obj);
        }

        function Search(Obj) {
            $('#modalBody').empty().css('display', 'none');
            $('#modalAni').html('<i class="fa fa-refresh fa-spin"></i>');

            $('#mySearch').modal('show');

            ajaxCall(Obj);
        }

        function ajaxCall(Obj) {
            debugger;
            $.ajax({
                type: 'POST',
                url: searchBoxUrl,
                dataType: 'html',
                data: JSON.stringify(Obj),
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    $('#modalAni').empty();
                    $('#modalBody').html(data).slideDown(700);
                },
                error: function (err) {
                    debugger;
                }
            });
        }

        function trClick(rowId, searchTable) {
            var Obj = $('#' + rowId);
            var documentNo = Obj.data('document-no');
            location.href = '@Url.Content("~/CB/CBReceipt?CBReceiptType=''&DocumentNo=")' + documentNo;

        }

    </script>
}


