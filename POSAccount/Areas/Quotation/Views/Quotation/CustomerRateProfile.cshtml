@model POSAccount.Contract.Quotation

@{
    ViewBag.Title = "CustomerRateProfile";
}

<style type="text/css">
    label.error {
        color: red;
    }
</style>
<div class="modal fade in" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>
@{ Html.RenderAction("AddQuotation", "Quotation", new { area = "Quotation", quotationNo = "", itemID = 0 }); }
@using (Ajax.BeginForm("SaveQuotation", "QuotationController", new AjaxOptions { HttpMethod = "POST", OnSuccess = "OnSaveSuccess", OnFailure = "OnSaveFailure" }, new { enctype = "multipart/form-data", id = "myForm" }))
{
    <div class="box box-solid  box-default">
        <!-- Header -->
        <div class="box-header with-border">
            <h3 class="box-title">Customer Rate Profile
            </h3>
        </div>
        @* <div class="box box-solid  box-default">
        <div class="box-header with-border">
            <h3 class="box-title">Customer Rate Profile
            </h3>
        </div>*@
        <div class="panel-body">
            <fieldset class="form-horizontal">
                <div class="form-group">
                    <div>
                        @Html.LabelFor(q => q.QuotationNo, new { @class = "col-md-2 control-label input-sm" })
                        <div class="col-md-2">
                            @Html.TextBoxFor(q => q.QuotationNo, new { @class = "form-control input-sm", @readonly = "readonly" })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label input-sm">Quotation Date</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.QuotationDate, new { @id = "dtpQuotationDate", @class = "form-control input-sm datepicker", @readonly = "readonly" })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label input-sm">Effective Date</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.EffectiveDate, new { @id = "dtpEffectiveDate", @class = "form-control input-sm datepicker" })
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label input-sm">Customer Code</label>
                        <div class="col-md-2">
                            @Html.DropDownListFor(m => m.CustomerCode, Model.CustomerList, "", new { @class = "form-control select2 input-sm", onchange = "CustomerCodeChanged(this);" })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label input-sm">Customer Name</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.CustomerName, new { @id = "txtCustomerName", @class = "form-control input-sm", @readonly = "readonly" })
                        </div>
                        <label for="txtInvoiceNo" class="col-md-2 control-label input-sm">Expiry Date</label>
                        <div class="col-md-2">
                            @Html.TextBoxFor(m => m.ExpiryDate, new { @id = "dtpExpiryDate", @class = "form-control input-sm datepicker" })
                        </div>
                    </div>
                </div>
                @Html.HiddenFor(m => m.Status, new { @id = "txtStatus", @class = "form-control input-sm" })
                @*<div class="form-group">
                    <div>
                        <label for="txtStatus" class="col-md-2 control-label input-sm">Status</label>
                        <div class="col-md-2">
                            @Html.HiddenFor(m => m.Status, new { @id = "txtStatus", @class = "form-control input-sm" })
                            @Html.Display("lblStatus", new { id = "lblStatus" })
                        </div>

                    </div>
                </div>*@
                @*<button type="button" class="btn btn-small btn-primary" onclick="btnadditem();"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Add Item</button>
                <table id="tblQuotationItem" class="table table-striped table-hover table-bordered table-responsive ">
                    <thead style="background-color:steelblue;color:white;font-size:12px;">
                        
                        <tr>
                            <td class="hidden">Id</td>
                            <td class="hidden">ChargeCode</td>
                            <th>Charge Code</th>
                            <th>Slab Rate</th>
                            <th>From </th>
                            <th>To</th>
                            <th>Sell Rate</th>
                            <th>Action</th>
                        </tr>
                        
                    </thead>
                    <tbody style="font-size:12px;">
                        @if (Model != null)
                        {
                            for (int i = 0; i < Model.QuotationItems.Count; i++)
                            {
                                <tr id="tr_@i">
                                    <td class='hidden'>
                                        @Html.HiddenFor(m => m.QuotationItems[i].ItemID)
                                    </td>
                                    <td name="ChargeCode" class="hidden">
                                        @Html.HiddenFor(m => m.QuotationItems[i].ChargeCode)
                                        @Html.DisplayFor(m => m.QuotationItems[i].ChargeCode)
                                    </td>
                                    <td name="ChargeCodeDescription">
                                        @Html.HiddenFor(m => m.QuotationItems[i].ChargeCodeDescription)
                                        @Html.DisplayFor(m => m.QuotationItems[i].ChargeCodeDescription)
                                    </td>
                                    <td name="SlabRate">
                                        @Html.HiddenFor(m => m.QuotationItems[i].SlabRate)
                                        @Html.CheckBoxFor(m => m.QuotationItems[i].SlabRate)
                                    </td>
                                    <td name="SlabRateFrom">
                                        @Html.HiddenFor(m => m.QuotationItems[i].SlabRateFrom)
                                        @Html.DisplayFor(m => m.QuotationItems[i].SlabRateFrom)
                                    </td>
                                    <td name="SlabRateTo">
                                        @Html.HiddenFor(m => m.QuotationItems[i].SlabRateTo)
                                        @Html.DisplayFor(m => m.QuotationItems[i].SlabRateTo)
                                    </td>
                                    <td name="SellRate">
                                        @Html.HiddenFor(m => m.QuotationItems[i].SellRate)
                                        @Html.DisplayFor(m => m.QuotationItems[i].SellRate)
                                    </td>
                                    <td name="Action">
                                        <img class="img-class" onclick="EditQuotationItems(@Model.QuotationItems[i].ItemID)" src="~/Images/Pencil.png" />
                                        <img class="img-class" onclick="DeleteQuotationItems(@Model.QuotationItems[i].ItemID)" src="~/Images/Delete.png" />

                                    </td>
                                </tr>
                            }
                        }


                    </tbody>
                </table>*@
                <div class="nav-tabs-custom">
                    <ul class="nav nav-tabs">
                        <li class="active">
                            <a href="tbDetails" data-toggle="tab">Quotation Details</a>
                        </li>
                        <li class="pull-right">
                            <div class="btn-group btn-primary">
                                @*<a class="btn btn-small btn-primary" data-toggle="modal" href="@Url.Content("~/Quotation/AddQuotation?quotationNo=STANDARD&itemID=0")" id="btnCreate"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Add Item</a>*@
                                @*@Html.ActionLink("Add Item", "AddQuotation", "Quotation", new { area = "Quotation", quotationNo = "STANDARD", itemID = 0 }, new { data_modal = "", id = "btnCreate", @class = "btn btn-small btn-primary" })*@
                                <button type="button" class="btn btn-small btn-primary" onclick="btnadditem();"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;Add Item</button>
                            </div>
                        </li>
                    </ul>
                    <!-- Display List Section -->
                    <div class="tab-content">
                        <div class="tab-pane active" id="tbDetails">
                            <table id="tblQuotationItem" class="table table-striped table-hover table-bordered table-responsive ">
                                <thead style="background-color: steelblue; color: white; font-size: 12px;">
                                    <tr>
                                        <td class="hidden">Id</td>
                                        <td class="hidden">ChargeCode</td>
                                        <th>Charge Code</th>
                                        <th>Slab Rate</th>
                                        <th>From </th>
                                        <th>To</th>
                                        <th>Sell Rate</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody style="font-size: 12px;" id="tblBody">

                                    @{
    for (int i = 0; i < Model.QuotationItems.Count; i++)
    {
                                        <tr>
                                            <td class='hidden'>
                                                @Html.HiddenFor(m => m.QuotationItems[i].ItemID)
                                            </td>
                                            <td name="ChargeCode" class="hidden">
                                                @Html.HiddenFor(m => m.QuotationItems[i].ChargeCode)
                                                @Html.DisplayFor(m => m.QuotationItems[i].ChargeCode)
                                            </td>
                                            <td name="ChargeCodeDescription">
                                                @Html.HiddenFor(m => m.QuotationItems[i].ChargeCodeDescription)
                                                <span id="ChargeCodeDescription_@i">@Html.DisplayFor(m => m.QuotationItems[i].ChargeCodeDescription)</span>
                                            </td>
                                            <td name="SlabRate">
                                                @Html.HiddenFor(m => m.QuotationItems[i].SlabRate)
                                                <span id="SlabRate_@i">@(Model.QuotationItems[i].SlabRate ? "Yes" : "No")</span>
                                            </td>
                                            <td name="SlabRateFrom">
                                                @Html.HiddenFor(m => m.QuotationItems[i].SlabRateFrom)
                                                <span id="SlabRateFrom_@i">@Html.DisplayFor(m => m.QuotationItems[i].SlabRateFrom)</span>
                                            </td>
                                            <td name="SlabRateTo">
                                                @Html.HiddenFor(m => m.QuotationItems[i].SlabRateTo)
                                                <span id="SlabRateTo_@i">@Html.DisplayFor(m => m.QuotationItems[i].SlabRateTo)</span>
                                            </td>
                                            <td name="SellRate">
                                                @Html.HiddenFor(m => m.QuotationItems[i].SellRate)
                                                @Html.HiddenFor(m => m.QuotationItems[i].Status)
                                                <span id="SellRate_@i">@Html.DisplayFor(m => m.QuotationItems[i].SellRate)</span>
                                            </td>
                                            <td name="Action">
                                                <div class="dropdown">
                                                    <button class="btn btn-warning btn-sm dropdown-toggle" style="border-radius: 0px !important;" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">
                                                        Action
                                                                <span class="caret"></span>
                                                    </button>
                                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenu1">
                                                        <li><a class="cursorCss" id="Edit_@i" onclick="EditQuotationItems('@(i)')"><i class="fa fa-pencil"></i>&nbsp;Edit</a></li>
                                                        <li><a class="cursorCss" id="Delete_@i" onclick="DeleteQuotationItems('@(i)')"><i class="fa fa-trash-o"></i>&nbsp;Delete</a></li>
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </fieldset>
        </div>

    </div>
    <button class="btn btn-primary btn-sm" type="submit"><i class="fa fa-save"></i>&nbsp;Save</button>
    <button class="btn btn-default btn-sm" type="button" onclick="btnClear();"><i class="fa fa-trash" aria-hidden="true"></i>&nbsp;Clear</button>
    <button class="btn btn-danger btn-sm" type="button" onclick="btnDelete();"><i class="fa fa-times" aria-hidden="true"></i>&nbsp;Delete</button>
    <button class="btn btn-success btn-sm" type="button" onclick="location.href = '@Url.Content("~/Quotation/CustomerQuotations")'"><i class="fa fa-undo" aria-hidden="true"></i>&nbsp;Back</button>    
    <a href="@Url.Action("CustomerRateProfile", "Quotation", new { area = "Quotation", quotationNo = "NEW" }, null)" class="btn btn-default btn-sm btn-info"><i class="fa fa-plus" aria-hidden="true"></i>&nbsp;New</a>

}

@section Scripts{

    @Scripts.Render("~/bundles/modalform")
    <script type="text/javascript">
        var linkedIndex;
        $(document).ready(function () {

            if ($("#txtStatus").val() == "True") {
                var todayDate = Date.now();
                var expiryDate = new Date($("#txtExpiryDate").val());
                if (expiryDate > todayDate) {
                    $("#lblStatus").text("Expired");
                }
                else {
                    $("#lblStatus").text("Active");
                }

            }

            $('#dtpQuotationDate, #dtpEffectiveDate, #dtpExpiryDate').datetimepicker({
                useCurrent: false,
                //maxDate: moment('DateTime.Now.ToString("dd/MM/yyyy")'),
                format: 'DD/MM/YYYY',
                inline: false
            });

            $('#tblQuotationItem').DataTable({
                responsive: true,
                'fnRowCallback': function (nRow, aData, iDisplayIndex) {
                    //nRow.className = "gradeX odd";
                    nRow.id = 'EditQuotationItemstr_' + iDisplayIndex;
                    nRow.className = 'EditQuotationItemstrCss';
                    return nRow;
                }
            });
            var table = $('#tblQuotationItem').DataTable();
            $('#tblQuotationItem tbody').on('click', 'tr', function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    table.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });

            AddQuotationValidation();

            $('#myForm').validate({
                rules: {
                    EffectiveDate: {
                        required: true
                    },
                    ExpiryDate: {
                        required: true
                    },
                    CustomerCode: {
                        required: true
                    }
                },
                messages: {
                    EffectiveDate: {
                        required: 'Effective Date is required.'
                    },
                    ExpiryDate: {
                        required: 'Expiry Date is required.'
                    },
                    CustomerCode: {
                        required: 'Customer Code is required'
                    }
                }
            });

        });

        function btnDelete() {
            $('#myForm').attr('action', '@Url.Content("~/Quotation/DeleteQuotation")');
            $('#myForm').submit();
        }

        function CustomerCodeChanged(el) {
            $('#txtCustomerName').val($('#' + el.id + ' option:selected').text());
        }

        function OnSaveFailure(result) {
            ModalShow(result.Message, "Failure", "Save");
        }

        function OnSaveSuccess(result) {
            if (result.success) {
                ModalShow(result.Message, "Success", "Save");
            }
            else {
                ModalShow(result.Message, "Failure", "Save");
            }

            //ModalShow(result.Message, "Success", "Save");
            //;
            DocumentNo = result.quotationData.QuotationNo;
        }


        function BtnOK() {
            if (ActionType == "Save") {
                location.href = "/Quotation/CustomerQuotations";
            }
        }


        $(".datepicker").datetimepicker({
            format: 'DD/MM/YYYY',
            //Default: true
        });

        $(".datepicker").on("dp.change", function (e) {

            var count = 0;
            var expirydate = effectivedate = null;
            if (typeof $("#dtpEffectiveDate").val() != "undefined" && $("#dtpEffectiveDate").val() != "") {
                //expirydate = new Date($("#dtpEffectiveDate").val().replace('-', '/').replace('-', '/'));
                effectivedate = new moment($("#dtpEffectiveDate").val(), 'DD/MM/YYYY');
                count = count + 1;
            }
            if (typeof $("#dtpExpiryDate").val() != "undefined" && $("#dtpExpiryDate").val() != "") {
                //effectivedate = new Date($("#dtpExpiryDate").val().replace('-', '/').replace('-', '/'));
                expirydate = new moment($("#dtpExpiryDate").val(), 'DD/MM/YYYY');
                count = count + 1;
            }

            if (count == 2 && expirydate <= effectivedate) {
                //ShowNotifyMessage("Warning:", "The expiry date should be more than effective date.", 'danger')
                alert("The expiry date should be more than effective date.");
                $("#dtpExpiryDate").val('');
            }


        });

        function EditQuotationItems(index) {
            linkedIndex = index;

            $('#ddlChargeCode').val($('#QuotationItems_' + index + '__ChargeCode').val());

            if ($('#QuotationItems_' + index + '__SlabRate').val().toLowerCase() == 'true') {
                $('#chkIsSlabRate').prop('checked', 'checked');
            }
            else {
                $('#chkIsSlabRate').removeAttr('checked');
            }
            $('#SlabRateFrom').val($('#QuotationItems_' + index + '__SlabRateFrom').val());
            $('#SlabRateTo').val($('#QuotationItems_' + index + '__SlabRateTo').val());
            $('#SellRate').val($('#QuotationItems_' + index + '__SellRate').val());

            $('#AddQutationModal').modal('show');

        }

        function DeleteQuotationItems(index) {
            $('#EditQuotationItemstr_' + index).css({
                'text-decoration': 'line-through',
                'color': 'red',
                'font-style': 'italic'
            });

            $('#QuotationItems_' + index + '__Status').val('False');
        }

        //function DeleteQuotationItems(QuotationItemId) {
        //    if (!confirm("Do you want to delete QuotationItem?")) {
        //        return false;
        //    }
        //    if (QuotationItemId > 0) {
        //        $.ajax({
        //            url: "/Quotation/DeleteQuotation?QuotationItemId=" + QuotationItemId,
        //            type: "GET",
        //            contentType: "application/x-www-form-urlencoded",
        //            success: function (result) {

        //            }
        //        });
        //    }
        //    else {
        //        var table = $('#tblQuotationItem').DataTable();
        //        table.row('.selected').remove().draw(false);
        //        //$('#tblQuotationItem').deleteRow(0);
        //    }
        //}

        //$('#tblQuotationItem').find('tr').click(function () {
        //    alert('You clicked row ' + ($(this).index() + 1));
        //});

        function linkClicked(li) {
            linkedIndex = li;
        }

        //function AddDataToTable() {

        //    var tblData = new Array();
        //    
        //    tblData = [{ ServiceType: $("#ServiceType").val(), ChargeCode: $("#ChargeCode").val(), ChargeType: $("#ChargeType").val(), From: $("#From").val(), To: $("#To").val(), SellRate: $("#SellRate").val() }];
        //    if (linkedIndex != null) {
        //        if ($('#tr_' + linkedIndex).length == 1) {

        //            $('#tblQuotationItem').dataTable().fnAddData([
        //             this.ServiceType, this.ChargeCode, this.ChargeType, this.From, this.To, this.SellRate, "Action"
        //            ]);

        //            //QuotationItemTable.row.add(tblData).draw();
        //            //$('#tr_' + linkedIndex).html(newHtml);
        //        }
        //        $('#myModal').modal('hide');
        //        linkedIndex = null;
        //    }
        //    else {
        //        ;
        //        var row = "";
        //        var rowCount = 0;
        //        if ($('#tblQuotationItem').dataTable().fnSettings().aoData.length > 0) {
        //            rowCount = $('#tblQuotationItem tr').length - 1;;
        //        }

        //        $('#tblQuotationItem').dataTable().fnAddData([
        //          //0,
        //           "<input id='QuotationItems[" + rowCount + "].ItemID' type='hidden' value=" + rowCount + " name='QuotationItems[" + rowCount + "].ItemID'>"
        //           , "<input id='QuotationItems[" + rowCount + "].ChargeCode' type='hidden' value=" + this.ddlChargeCode.value + " name='QuotationItems[" + rowCount + "].ChargeCode'>" + this.ddlChargeCode.value
        //            , "<input id='QuotationItems[" + rowCount + "].ChargeCodeDescription' type='hidden' value=" + this.ddlChargeCode.options[ddlChargeCode.selectedIndex].text + " name='QuotationItems[" + rowCount + "].ChargeCodeDescription'>" + this.ddlChargeCode.options[ddlChargeCode.selectedIndex].text
        //           , "<input id='QuotationItems[" + rowCount + "].SlabRate' type='hidden' value=" + this.chkIsSlabRate.checked + " name='QuotationItems[" + rowCount + "].SlabRate'>" + this.chkIsSlabRate.value == "True" ? "Yes" : "No"
        //           , "<input id='QuotationItems[" + rowCount + "].SlabRateFrom' type='hidden' value=" + this.SlabRateFrom.value + " name='QuotationItems[" + rowCount + "].SlabRateFrom'>" + this.SlabRateFrom.value
        //           , "<input id='QuotationItems[" + rowCount + "].SlabRateTo' type='hidden' value=" + this.SlabRateTo.value + " name='QuotationItems[" + rowCount + "].SlabRateTo'>" + this.SlabRateTo.value
        //           , "<input id='QuotationItems[" + rowCount + "].SellRate' type='hidden' value=" + this.SellRate.value + " name='QuotationItems[" + rowCount + "].SellRate'>" + this.SellRate.value
        //           , " <img src='/Images/Pencil.png' onclick='EditQuotationItems(" + rowCount + ")' class='img-class'> <img src='/Images/Delete.png' onclick='DeleteQuotationItems(" + rowCount + ")' class='img-class'>"
        //        ]);
        //        //<a onclick='return linkClicked(0)' href='/Quotation/AddQuotation?itemId=" + rowCount + "' data-modal=''>Edit Details</a>
        //        $('tr td:nth-child(1)').hide()
        //        $('tr td:nth-child(2)').hide()
        //    }
        //    $('#myModal').modal('hide');// $('#myModalContent').modal('hide');
        //}

        function AddQuotationValidation() {
            $('#frmAddQutation').validate({
                rules: {
                    ChargeCode: {
                        required: true
                    },
                    SellRate: {
                        required: true
                    }
                },
                messages: {
                    ChargeCode: {
                        required: 'Charge Code is required.'
                    },
                    SellRate: {
                        required: 'SellRate is required.'
                    },
                    SlabRateFrom: {
                        required: 'SellRate From is required.'
                    },
                    SlabRateTo: {
                        required: 'SellRate To is required.'
                    }
                }
            });
        }

        function AddDataToTable() {
            var isVal = $('#frmAddQutation').valid();
            if (!isVal)
                return;


            var tblData = new Array();


            tblData = [{ ChargeCode: $("#ddlChargeCode").val(), SlabRate: $("#chkIsSlabRate").is(':checked'), SlabRateFrom: $("#SlabRateFrom").val(), SlabRateTo: $("#SlabRateTo").val(), SellRate: $("#SellRate").val() }];
            if (linkedIndex != null) {
                //if ($('#tr_' + linkedIndex).length == 1) {

                //    $('#tblQuotationItem').dataTable().fnAddData([
                //     this.ServiceType, this.ChargeCode, this.ChargeType, this.From, this.To, this.SellRate, "Action"
                //    ]);

                //    //QuotationItemTable.row.add(tblData).draw();
                //    //$('#tr_' + linkedIndex).html(newHtml);
                //}
                //$('#AddQutationModal').modal('hide');

                $('#QuotationItems_' + linkedIndex + '__ChargeCode').val($('#ddlChargeCode').val());
                $('#ChargeCodeDescription_' + linkedIndex).text($('#ddlChargeCode option:selected').text());

                $('#QuotationItems_' + linkedIndex + '__SlabRate').val($('#chkIsSlabRate').is(':checked'));
                $('#SlabRate_' + linkedIndex).text(($('#chkIsSlabRate').is(':checked') ? 'Yes' : 'No'));

                $('#QuotationItems_' + linkedIndex + '__SlabRateFrom').val($('#SlabRateFrom').val());
                $('#SlabRateFrom_' + linkedIndex).text($('#SlabRateFrom').val());

                $('#QuotationItems_' + linkedIndex + '__SlabRateTo').val($('#SlabRateTo').val());
                $('#SlabRateTo_' + linkedIndex).text($('#SlabRateTo').val());

                $('#QuotationItems_' + linkedIndex + '__SellRate').val($('#SellRate').val());
                $('#SellRate_' + linkedIndex).text($('#SellRate').val());

                linkedIndex = null;
            }
            else {
                var row = "";
                var rowCount = 0;
                if ($('#tblQuotationItem').dataTable().fnSettings().aoData.length > 0) {
                    rowCount = $('#tblQuotationItem tr').length - 1;;
                }

                $('#tblQuotationItem').dataTable().fnAddData([
                  //0,
                   "<input id='QuotationItems_" + rowCount + "__ItemID' type='hidden' value=" + rowCount + " name='QuotationItems[" + rowCount + "].ItemID'>"
                   , "<input id='QuotationItems_" + rowCount + "__ChargeCode' type='hidden' value=" + this.ddlChargeCode.value + " name='QuotationItems[" + rowCount + "].ChargeCode'>" + this.ddlChargeCode.value
                   , "<input id='QuotationItems_" + rowCount + "__ChargeCodeDescription' type='hidden' value=" + this.ddlChargeCode.options[ddlChargeCode.selectedIndex].text + " name='QuotationItems[" + rowCount + "].ChargeCodeDescription'><span id='ChargeCodeDescription_" + rowCount + "'>" + this.ddlChargeCode.options[ddlChargeCode.selectedIndex].text + '</span>'
                   , "<input id='QuotationItems_" + rowCount + "__SlabRate' type='hidden' value=" + $('#chkIsSlabRate').is(':checked') + " name='QuotationItems[" + rowCount + "].SlabRate'><span id='SlabRate_" + rowCount + "'>" + ($('#chkIsSlabRate').is(':checked') ? "Yes" : "No") + '</span>'
                   , "<input id='QuotationItems_" + rowCount + "__SlabRateFrom' type='hidden' value=" + this.SlabRateFrom.value + " name='QuotationItems[" + rowCount + "].SlabRateFrom'><span id='SlabRateFrom_" + rowCount + "'>" + this.SlabRateFrom.value + '</span>'
                   , "<input id='QuotationItems_" + rowCount + "__SlabRateTo' type='hidden' value=" + this.SlabRateTo.value + " name='QuotationItems[" + rowCount + "].SlabRateTo'><span id='SlabRateTo_" + rowCount + "'>" + this.SlabRateTo.value + '</span>'
                   , "<input id='QuotationItems_" + rowCount + "__SellRate' type='hidden' value=" + this.SellRate.value + " name='QuotationItems[" + rowCount + "].SellRate'>" +
                     "<input id='QuotationItems_" + rowCount + "__Status' type='hidden' value=" + '@Boolean.TrueString' + " name='QuotationItems[" + rowCount + "].Status'><span id='SellRate_" + rowCount + "'>" + this.SellRate.value + '</span>'
                   , " <img src='/Images/Pencil.png' onclick='EditQuotationItems(" + rowCount + ")' class='img-class'> <img src='/Images/Delete.png' onclick='DeleteQuotationItems(" + rowCount + ")' class='img-class'>"
                ]);
                //<a onclick='return linkClicked(0)' href='/Quotation/AddQuotation?itemId=" + rowCount + "' data-modal=''>Edit Details</a>
                $('tr td:nth-child(1)').hide()
                $('tr td:nth-child(2)').hide()
            }
            $('#AddQutationModal').modal('hide');// $('#myModalContent').modal('hide');
        }

        function btnadditem() {
            //data-toggle="modal" data-target="#AddQutationModal"
            $('#ddlChargeCode').val();
            $('#chkIsSlabRate').removeAttr('checked');
            $('#SlabRateFrom, #SlabRateTo, #SellRate').val('');
            $('#AddQutationModal').modal('show');

        }

        function checkedChanged(el) {

            var isChecked = $(el).is(':checked');
            if (isChecked) {
                $('#SlabRateFrom, #SlabRateTo').attr('required', 'required');
            }
            else {
                $('#SlabRateFrom, #SlabRateTo').removeAttr('required');
            }
        }

        function btnClear() {
            // $('#tblBody').empty();
            $('.form-control').val('');
            $('#tblQuotationItem').DataTable().clear().draw();
            $('#QuotationNo').val('NEW');

            $('#dtpQuotationDate').val('@DateTime.Now.ToString("dd/MM/yyyy")');
        }
    </script>
}





